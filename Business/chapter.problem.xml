<?xml version="1.0" encoding="UTF-8"?>
<chapter id="出现问题为什么会相互推诿">
	<title>出现问题为什么会相互推诿</title>
	<para>
		一旦出现问题，很可能同事反目成仇，背后给你一枪，将责任推给其他人。有时可能是部门相互推卸责任。这种做法会像瘟疫一样传染，影响更多的人或部门效仿。
	</para>
	<para>
		如果不加以控制，后果很严重，波及面广，一旦成为定势，你再想翻盘非常困难。不管你是否愿意或承认，这将会成为企业文化的一部分。
	</para>
	<para>
		你想改变，很难！你会发现新入职的员工很快学会并适应这种推诿的企业文化，新鲜血液总是少量输入的，就像得了癌症一样不可控制。
	</para>
	<para>
		出现这样事情问题出在哪里？
	</para>
	<para>我们对待这个世界的态度会议这样一种方式反馈到自己身上：你怎么对待别人，被人就怎么对待你。</para>
	<itemizedlist spacing="compact">
		<listitem>
			<para>
				管理者不懂技术
			</para>
		</listitem>
		<listitem>
			<para>
				组织架构不合理，部门与部门是平级关系，平级部门最容易推卸责任。
			</para>
		</listitem>
		<listitem>
			<para>
				对自身定位，有些管理层认为是权利部门，我们更需要的是服务部门。
			</para>
		</listitem>
		<listitem>
			<para>
				背黑锅文化
			</para>
		</listitem>
	</itemizedlist>
	<section id="我来详细分析">
		<title>我来详细分析</title>
		<para>
			首先是“管理者不懂技术”，如果管理者不懂技术，什么都想管，又管不好，当出现问题后，这位裁判只能听各部门负责人报告，那个部门的口才好，嗓门高.....
			那个部门就有优势，无法做好裁判工作。败下阵来的部门背黑锅，他们也不是孬的，骑驴看账本，走着瞧，挖坑埋地雷也要找回面子。
		</para>
		<para>
			“组织架构不合理”。平级部门最爱干的就是制定各种流程，让其他部门按照我的流程走，这样每个部门都会如法炮制，流程很多做法是给上面看的。
		</para>
		<para>
			“自身定位”，我认为每个人或部门都要有服务意识，我在外企工作多年，在外企HR，财务等等部门都是服务部门，确切的说是“主动服务部门”，他们会主动上门服务，例如财务会问问你有没有什么要报销的.....。而在国内大部分部门都是等你去主动找他们，他会会告诉你流程是什么，流程怎么走，这件事我不负责，你应该去找谁。服务意识是需要强行推行，中国人还没有达到服务意识层次。
		</para>
		<para>
			“背黑锅文化”除了问题急于找人背黑锅，揪出肇事者，责任全是他的，这在中国是惯用手法。我的经验是千万别找人被黑锅，不要单指某人，出现问题谁都有责任。
		</para>
		<para>
			一旦企业出现这个推诿行为的苗头，必须要控制，不可蔓延。避免出现多个平级部门，必须有人能领导这些部门，做好裁判工作，使他们不敢推卸责任。
		</para>
	</section>
	<section>
		<title>中西方企业文化对比</title>
		<para>中西职场观念的差异，中国同事总是把工作任务当做皮球一样踢来踢去，“我经常发现当一个人将工作交给另外一个人去完成时，他同时将跟进工作完成质量的任务一并交送出去。当我问他结果时，他会说：不知道，我已经将这件事交代给其他人了。”
			罗夫希望自己的管理理念能改变现状，可发现这是一件很难的事。摘自：老外眼中的中国职场
		</para>
		<!-- 《管钥匙的人不在》( The Man With The Key is Not Here ) -->
	</section>
	 
	<section id="dri">
		<title>直接责任人（DRI）制度</title>
		<para>苹果公司公司发明了这样一个管理概念：直接责任人（Directly Responsible
			Individual，简称DRI）。DRI遍布于公司各个层级。在苹果，谁负责什么，永远不会搞混。DRI的名字经常出现在会议进程表上，每个人都知道谁是直接负责人。如此公开透明的责任制使得每一个员工没有互相推诿和偷懒的机会，一旦项目出现问题，很容易找到出现问题的环节予以纠正，并追究相关责任。而且，一个项目只能有一个DRI，如果超过一个DRI，那就等于没有直接责任人。DRI能够有效加速决策流程，也可以减少很多不必要的会议。
		</para>
	</section>

	<section id="审批的陷阱">
		<title>审批的陷阱</title>
		<para>企业需要购买一个设备，于是就填写申请单，找你签字审批，作为老板，你并不知道该买还是不该买，于是出现了层层把关，层层审批。</para>
		<para>首先让申请人的直属领导先审批，然后再依次向上提交并审批，最后提交到你这里，你认为这样应该没有问题了。</para>
		<para>结果各种申请单如雪片一般提交到你这里，并且前面都已审批，大家都签了字（同意），与此前相比，申请单只多不少。</para>
		<para>你会发现你下面的管理层对于下面提出的申请，来者不拒，大笔一挥“同意”。</para>
		<para>这些人比你更懂这个设备吗？恐怕他们跟你一样不知道要买的设备能做什么，如果拒绝审批，误了事怎么办？</para>
		<para>他们比你更有责任心吗？前面的人已经审批通过，我干嘛拒绝呢，这不是讨人嫌吗？</para>
		<para>最后大家都签了字，请老板定夺。如果出了错，谁都不负责。</para>
		<para>在互联网企业也是如此，程序猿写完程序，测试通过，产品觉得没有问题，一路绿灯，就上线了。</para>
	</section>

</chapter>

<chapter id="深耕一个行业，还是多领域尝试">
	<title>深耕一个行业，还是多领域尝试？</title>
	<para>对于企业深耕一个行业，还是多领域尝试呢？</para>
	<para>保持基业长青，需要追逐风口，如今没有哪个行业可以做一辈子，通常3-5年就要调整一次企业的方向。</para>
	<para>企业经营方向可以归纳为三种类型，I型，T型，X型，三种类型简称ITX。</para>
	<formalpara>
		<title>“I” 型企业</title>
		<para>“I” 型企业深耕垂直领域。</para>
		<para>I型企业抗风险能力差，例如人口红利消失，产业转移，城市转型，新冠疫情来临等等，对于I型企业是致命打击。</para>
		<para>“I” 型企业还有另一种做法是水平扩展。</para>
		<para>做全产业闭环生态，形成垄断，在上游，中游，下游均有定价权。</para>
	</formalpara>
	<formalpara>
		<title>“T”型企业</title>
		<para>T型企业要立足一个行业，然后不断尝试其他行业，这样可以避免风险。</para>
	</formalpara>
	<formalpara>
		<title>"X" 型企业</title>
		<para>X 型企业就更稳健，多领域发展，抗风险能力最强。</para>
	</formalpara>
</chapter>

<chapter>
	<title>为什么中国家族企业过不了三代?</title>
	<para>中国企业不用说三代，两代都极其艰难，为什么呢？</para>
	<para>首先中国企业创建的都是些什么人。中国第一代企业家，创业者多是的没有受过很好教育，学历不高的一代人，但他们是具有经商天赋的一代人。除了学历不高其余都高，他们具备了高智商，高情商，高财商，高胆商……	</para>
	<para>从87年改革开放到走具有中国特色的社会主义市场经济… 20年中，就如三国群雄逐鹿，时势造英雄，第一代企业家崛起。</para>
	<para>为什么第二代就不行了呢？</para>
	<para>我认为主要也是教育问题，第一代人主要是靠天赋加上后天学习成就了他们辉煌的业绩。但没有一个企业家敢让自己的子女重走一次自己的路。	</para>
	<para>由于第一代企业家深知学习的重要性，他们为子女提供了最好的教育环境，但是他们是照打工者去教育的，而不是按照守业者去教育的。所以他们子女去企业打工没有任何问题，但是做接班人就不合格了，只有少数后知后觉的子女能发现自己的问题。</para>
	<para>他们都犯了一个相同的错误，他们不知道学习跟学历关系，学历跟学识的关系，上学跟读书的关系。</para>
	<para>上学不等于读书，知识的构成 20%来自院校，80%来自社会。读教科书不算读书。</para>
	<para>学习不等于读书，学习的渠道多种多样，读书之一其中一种，且速度慢，也不一定适合所有人。除了读书之外网络和多媒体资源都是学习渠道。	</para>
	<para>学历不等于学识，博士等于深士，高学历是是面向微观领域，解决特定领域，特定问题而存在的。而经营企业，管理一个企业则需要学识渊博，掌握各种领域的跨界知识。	</para>
	<para>学识不等于能力，实际操作的落地能力</para>
</chapter>

<chapter id="程序猿说的「优化」是什么意思">
	<title>程序猿说的「优化」是什么意思？</title>
	<para>产品经理，程序猿口中的优化是什么意思？你是否想知道员工在干什么？是不是常常在会议上听到，产品经理和程序猿说在优化产品？</para>
	<para>确实有20%的优化工作确实是在优化产品，产品经理在打磨产品，程序猿在优化性能。</para>
	<para>但80%的优化工作其实是在修修补补，这些工作不创造任何价值，也是可以避免的。</para>
	<section>
		<title>经验和能力不足</title>
		<para>成为一名优秀的攻城狮，至少需要 9-15年，攻城狮的经验是从失败中积累的，这个过程是漫长的，需要时间和参与项目的数量。如果一名攻城狮进入公司后只做一个项目，积累经验是有限的，攻城狮参与的项目越多积累经验就越多。</para>
		<para>从招聘网站上的数据看，目前企业招聘追究性价比，会选择3-5年工作经验的员工，这些员工的经验积累不足，能力有限。很多企业为了弥补这些员工的经验和能力不足还会配置一个岗位叫架构师，一般也是5-8年工作经验。</para>
		<para>成为一名优秀的架构师首先需要有足够的项目练手，目前市面上的很多所谓架构师都达不到架构师的水平，他们更多只是熟手程序猿。在我看来一个团队中仅仅有一两名架构师是不足以提高团队的整体素质的。</para>
		<para>产品经理也是做的产品越多经验越丰富。</para>
		<para>一个经验不足的产品经理在做项目的时候，设计出的产品存在各种缺陷，常常是提交给开发人员后，发现不对，需要立即修改。这也是产品跟开发人员的主要冲突和矛盾。老道的产品经理就会先不做修改，事后一段时间后再提交一次优化，把这个遗留问题解决掉。</para>
		<para>开发人员也一样，经验不足，考虑不周，就会留下bug，甚至是刚刚提交代码，立马想到问题所在，必须在做一次修改。这也是开发人员跟测试人员的主要冲突和矛盾。测试人员刚刚测试完一轮，程序猿修改了代码，需要重新再测试一遍。老油条，他会评估BUG影响的范围，如果不影响正常使用或者达不到触发条件，就会先不修改代码，如果测试人员没有发现 这个BUG，就先上线，待日后优化掉。</para>
		<para>对于有10年以上经验的老码农写程序根本不用什么架构师来优化。他写程序的时候已经考虑了所有可能的性能，数据库结构，缓存策略，性能，扩展性，高可用......</para>
	</section>
	<section>
		<title>给前人擦屁股</title>
		<para>国内企业的人流量非常大，超过3年的老员工非常少，工作岗位细分，每个人都有自己负责的工作，即使是老员工也不愿意去维护其他同事写的代码，最终公司里没有一个人熟悉整个项目，总是那里出问题，临时去翻看代码。</para>
		<para>团队需要不断补充新鲜血液，新员工至少三个月的时间才能独立工作，新员工对老代码不熟悉，问了一圈也得不到答案，于是他想还不如重写那些老代码。的确有可能代码被重写后性能提高了，更多的是修改旧代码产生的新BUG。</para>
		<para>这个过程叫优化老代码</para>
	</section>
	<section>
		<title>先盖楼，后打地基</title>
		<para>很多互联网企业追求快，是先把项目做起来再说，随着业务的增长，发现系统已经无法满足，这时就期望高价招聘一个架构师解决系统存在的问题。</para>
		<para>这种先盖楼，后打地基的做法，后期产生的优化是无穷无尽的，直到整个系统被新代码被替换掉，或是推倒重来。如果中途架构师离职，新来的架构师又是一套新操作。</para>
	</section>
	<section>
		<title>使用新技术和不熟悉的技术</title>
		<para>网上常常看到一些踩坑的文章，意思就是在实施某项目过程中遇到的问题。</para>
		<para>使用新技术和不熟悉的技术，无法预判产生的影响和结果，才一次又一次的优化之后，对技术越来越熟悉，最终解决了问题。</para>
		<para>在我看来之所以出现“踩坑”问题，是你让一个没有经验的人负责一个复杂的项目，搞出一堆问题，生产环境成了实验场。</para>
		<para>不去追究责任，反倒鼓励员工的经验总结。对于员工来说倒是个非常好的练手机会，对于公司来说是各种损失。这种作风再当下比比皆是，抢险救灾领导被表扬，而不追究为什么发生事故。</para>
	</section>
	<section>
		<title>最后总结</title>
		<para>之所以现在网上各种优化类的文章，只能说明程序猿能力不足，经验不足，对技术掌握不全面，不深入。才会留那么多问题带日后解决，这些问题应该在设计之初就考虑，开发中就发现，不应该等到上线后再去验证。</para>
		<para>软件的犯错成本太低了，你见过做硬件的天天优化吗？</para>
	</section>
</chapter>
