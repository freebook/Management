<?xml version="1.0" encoding="UTF-8"?>
<!-- $Author: netkiller $ -->
<!-- $Id: chapter.workflow.xml 594 2013-05-22 10:30:58Z netkiller $ -->
<chapter id="risk">
	<title>风险管理</title>
	<para>涉及项目可能遇到各种不确定因素。它包括风险识别，风险量化，制订对策和风险控制等。</para>
	<section id="项目管理绕不开问题">
		<title>项目管理绕不开问题</title>
		<section id="开发测试与运维的关系">
			<title>开发，测试与运维的关系</title>
			<para>开发，测试，运维不是三个独立部门，他们相互紧密联系，但又相互制约：</para>
			<para>开发只负责写程序，将运行无误的程序提交至版本库中</para>
			<para>开发不能私自将程序交给运维部署，也不能将编译好的程序给运维测试。</para>
			<para>测试部只能从版本库提取代码，然后编译，打包，运行，测试 </para>
			<para>不允许测试部将代码交给运维部部署</para>
			<para>避免代码没有经过版本库流入生产环境，线下与线上代码不一致</para>
			<para>运维部负责部署应用程序，配置管理，只接受测试部确认无误的版本，部署代码只能从版本库中提取</para>

			<para>开发 -&gt; 测试 -&gt; 运维 贯穿始终。</para>
		</section>
		<section>
			<title>压力问题</title>
			<para>运维人员在互联网企业是最辛苦的，7*24小时待命，待遇一般。</para>
			<para>很多程序写的非常差，BUG非常多，容易出现无响应，崩溃，开发人员一时也解决不了，只能硬上线。</para>
			<para>最终这些问题都推给运维，通过运维手段去解决。这就让运维工作压力很大，状态紧绷，如履薄冰，如临深渊，随时随地处理故障。尤其是在双11这样的节日。</para>
		</section>
		<section>
			<title>重速度轻安全</title>
			<para>国内互联网企业成长速度是第一位，管理粗放，怎么快，怎么来。</para>
			<para>期初公司也是重视安全的，例如账号权限分级管理，操作也有流程，审批。但是企业要速度，各部门都面临压力。从一周一个版本到一天升级一个版本，程序的质量也在下滑，常常升级失败，反复回撤，为了效率甚至线上直接开放给开发人员权限，在线上修改。很多开发人员拥有数据库权限。</para>
			<para>另一个问题是人员流动，很多人离职很长一段时间，权限都没有收回，仍能远程进入系统。</para>
			<para>国内企业没有花钱请安全顾问公司的习惯，自认为自己有能力解决安全问题。运维人员也不会向公司建议找第三方安全公司，他们担心公司怀疑他们的技术能力。</para>
		</section>
		<section>
			<title>技术实力</title>
			<para>你真的认为花高薪聘用的运维人员技术能力很强吗？哪些标着有BAT经验（大企业），渡过金的人运维人员能力很强吗？</para>
			<para>很多运维人员仅仅是安装配置的水平，看了几本架构优化的书籍侃侃而谈。哪些在大企业干过的运维人员，也仅仅接触到平台的一角，他的权限根本无法窥视到全貌，无法使公司的运维水平上升到另一高度。</para>
			<para>目前互联网企业运维人员普遍比较年轻，都是90后组成，这个年纪正是处于经验积累阶段和学习阶段，只有把系统当成了试验场才能学到东西，有很多事故是运维人员赶时髦，使用了一些新技术，不熟悉的技术（仅仅掌握皮毛），他们管这个叫“踩坑”。现在几乎没有企业招聘80后做运维，因为他们不能加班，不愿加班，抗压性/服从性较差。</para>
			<para>由于运维技术能力，眼界见识。不是他们没有做（备份，快照，防篡改技术，防删除技术），是他们是想不出来解决方案的。</para>
			<para>运维人员也不会建议公司请第三方公司或技术顾问，一是要花钱，公司不同意。二是，他们怕公司怀疑他们的技术能力。就这样很多问题被尘封了，只有出现重大事故的时候你才意识到他们能力不行。</para>
		</section>
		<section>
			<title>测试问题</title>
			<para>首先回答你测试问题，测试人员的水平是整个团队中能力最差的，企业对技术人员重视重读顺序是，开发第一，运维第二，测试第三。人肉测试与自动化测试80%:20%的比例，掌握自动化测试高级测试人员薪水不低，很多企业不愿意或出于成本考虑，国内人力成本便宜大量采用人肉测试。无论是人肉还是自动化距离理想期望的测试结果还差的远。</para>
			<para>自动化测试实施常常遇到很多问题（安全，技术，管理等等），例如</para>
			<para>自动化测试攻城狮的技术水平有限（仅仅掌握了皮毛）需求的频繁变更让自动化测试脚本成为负担，最后不了了之复杂的技术栈，手机验证，图像验证，定位信息，摄像头操作，指纹，传感器，二进制位操作...... 一般测试攻城狮搞不了，卡在某个点过不去，最终放弃</para>
			<para>导致自动化测试无法继续实施下去，一般除非是在职的高级软件攻城狮转测试攻城狮，他对需求清楚，功能清楚，协议清楚，数据清楚，业务逻辑走向清楚，否则一般的测试攻城狮根本搞不定这么复杂的测试脚本。企业也不舍得让这个开发主力转到测试部门去。</para>
			<para>由于系统过于庞大，人肉测试所有功能是不现实的，所以常常是只测试新加入的功能或测试有依赖的功能。实际工作中，程序猿改动一行代码，牵一发动全身，尤其是那些复用的代码，加之程序猿人员流动，当时负责该功能人早已经离职（平均三年离职），你不知道改动一处，会有什么影响，所以程序猿很抵触修改老代码和其他人写的代码，宁可自己重新写，这又造成了脏代码，代码不断膨胀，反证三年后他也可能离职，让新来的程序猿接盘。所以常常是新加入的功能测试OK，隐藏很深的一个功能出现的故障，测试无法覆盖到所有功能。</para>
			<para>很多时候故障不是测试人员发现的，多半是用户发现的，用户投诉到客服，客服反馈给技术部。</para>
		</section>
		<section>
			<title>运维问题</title>
			<para>接下来回答你运维的问题，运维手段多着能，通过运维手段可以解决很多BUG问题。常用手段，例如万能重启，主备策略，负载均衡，快照，权限控制。我给你举几个例子。</para>
			<para>如果代码容易崩溃，那就做一个自动重启的脚本，发现崩溃，立马重启。</para>
			<para>如果代码并发有问题，例如做一个并发 10000的程序，结果程序猿水平有限1000并发就崩溃。就用负载均衡堆硬件，用10台服务器，先抗着</para>
			<para>代码有漏洞，黑客入侵，修改页面植入木马。运维就通过权限限制文件只能读，不能修改。</para>
			<para>代码有漏洞，导致黑客修改数据库数据。运维有多重解决方案，例如去掉修改权限，临时增加触发器，修改数据抛出错误中止操作</para>
			<para>很多手段，这些手段可以为开发人员争取代码修复的时间	</para>
		</section>
	</section>
	<section id="程序猿说的「优化」是什么意思">
		<title>程序猿说的「优化」是什么意思？</title>
		<para>产品经理，程序猿口中的优化是什么意思？你是否想知道员工在干什么？是不是常常在会议上听到，产品经理和程序猿说在优化产品？</para>
		<para>确实有20%的优化工作确实是在优化产品，产品经理在打磨产品，程序猿在优化性能。</para>
		<para>但80%的优化工作其实是在修修补补，这些工作不创造任何价值，也是可以避免的。</para>
		<section>
			<title>经验和能力不足</title>
			<para>成为一名优秀的攻城狮，至少需要 9-15年，攻城狮的经验是从失败中积累的，这个过程是漫长的，需要时间和参与项目的数量。如果一名攻城狮进入公司后只做一个项目，积累经验是有限的，攻城狮参与的项目越多积累经验就越多。</para>
			<para>从招聘网站上的数据看，目前企业招聘追究性价比，会选择3-5年工作经验的员工，这些员工的经验积累不足，能力有限。很多企业为了弥补这些员工的经验和能力不足还会配置一个岗位叫架构师，一般也是5-8年工作经验。</para>
			<para>成为一名优秀的架构师首先需要有足够的项目练手，目前市面上的很多所谓架构师都达不到架构师的水平，他们更多只是熟手程序猿。在我看来一个团队中仅仅有一两名架构师是不足以提高团队的整体素质的。</para>
			<para>产品经理也是做的产品越多经验越丰富。</para>
			<para>一个经验不足的产品经理在做项目的时候，设计出的产品存在各种缺陷，常常是提交给开发人员后，发现不对，需要立即修改。这也是产品跟开发人员的主要冲突和矛盾。老道的产品经理就会先不做修改，事后一段时间后再提交一次优化，把这个遗留问题解决掉。</para>
			<para>开发人员也一样，经验不足，考虑不周，就会留下bug，甚至是刚刚提交代码，立马想到问题所在，必须在做一次修改。这也是开发人员跟测试人员的主要冲突和矛盾。测试人员刚刚测试完一轮，程序猿修改了代码，需要重新再测试一遍。老油条，他会评估BUG影响的范围，如果不影响正常使用或者达不到触发条件，就会先不修改代码，如果测试人员没有发现 这个BUG，就先上线，待日后优化掉。</para>
			<para>对于有10年以上经验的老码农写程序根本不用什么架构师来优化。他写程序的时候已经考虑了所有可能的性能，数据库结构，缓存策略，性能，扩展性，高可用......</para>
		</section>
		<section>
			<title>给前人擦屁股</title>
			<para>国内企业的人流量非常大，超过3年的老员工非常少，工作岗位细分，每个人都有自己负责的工作，即使是老员工也不愿意去维护其他同事写的代码，最终公司里没有一个人熟悉整个项目，总是那里出问题，临时去翻看代码。</para>
			<para>团队需要不断补充新鲜血液，新员工至少三个月的时间才能独立工作，新员工对老代码不熟悉，问了一圈也得不到答案，于是他想还不如重写那些老代码。的确有可能代码被重写后性能提高了，更多的是修改旧代码产生的新BUG。</para>
			<para>这个过程叫优化老代码</para>
		</section>
		<section>
			<title>先盖楼，后打地基</title>
			<para>很多互联网企业追求快，是先把项目做起来再说，随着业务的增长，发现系统已经无法满足，这时就期望高价招聘一个架构师解决系统存在的问题。</para>
			<para>这种先盖楼，后打地基的做法，后期产生的优化是无穷无尽的，直到整个系统被新代码被替换掉，或是推倒重来。如果中途架构师离职，新来的架构师又是一套新操作。</para>
		</section>
		<section>
			<title>使用新技术和不熟悉的技术</title>
			<para>网上常常看到一些踩坑的文章，意思就是在实施某项目过程中遇到的问题。</para>
			<para>使用新技术和不熟悉的技术，无法预判产生的影响和结果，才一次又一次的优化之后，对技术越来越熟悉，最终解决了问题。</para>
			<para>在我看来之所以出现“踩坑”问题，是你让一个没有经验的人负责一个复杂的项目，搞出一堆问题，生产环境成了实验场。</para>
			<para>不去追究责任，反倒鼓励员工的经验总结。对于员工来说倒是个非常好的练手机会，对于公司来说是各种损失。这种作风再当下比比皆是，抢险救灾领导被表扬，而不追究为什么发生事故。</para>
		</section>
		<section>
			<title>最后总结</title>
			<para>之所以现在网上各种优化类的文章，只能说明程序猿能力不足，经验不足，对技术掌握不全面，不深入。才会留那么多问题带日后解决，这些问题应该在设计之初就考虑，开发中就发现，不应该等到上线后再去验证。</para>
			<para>软件的犯错成本太低了，你见过做硬件的天天优化吗？</para>
		</section>
	</section>

	<section id="制度流程和规范的误区">
		<title>制度、流程和规范的误区</title>
		<para>几乎所有的技术企业都会重视技术规范，为此制定各种规范，并要求员工严格执行。同时员工会想出各种对策，就这样形成了潜规则。</para>
		<para>这些规范就好比“请保持室内卫生，不准乱丢垃圾，禁止随地吐痰，不要闯红灯” 一样没起到的实质作用。</para>
		<para>管理层擅长制定乌托邦式的流程与规范，随便拿出一条都堪称完美，无懈可击，但没有考虑到执行结果，流程规范在执行过程中每个环节都会出现问题。任何一个环节出现问题就如同多米诺骨牌，造成连锁反应，最终无法控制。</para>
		<para>我19年的职业生涯中在不同的公司任职过，几乎每到一家公司都会遇到各种规范，随着职业发展最后我也成为了规范的制定者，也曾经主持制定过开发规范，运维规范，测试规范等等。</para>
		<para>我做过很多规范，文档无数，技术人员根本不会去看，通过开会向下传达，开会的人根本没有心思理会你的规范，规范执行阻力是很大的，效果也差。</para>
		<para>终于有一天我意识问题的存在，开始反思，是否需要制定这些规范？制定流程规范的目的是什么？ </para>
		<para>有些强制的规范可以通过一些技术手段，避免出现。不会出现也就无需规范！</para>

		<section>
			<title>故事一</title>
			<para>例如下面一个小故事，公司某部因为将开发数月的代码丢失了，导致测试无法进行，领导大发雷霆，某管理层制定了下面的规范，大意为。
			</para>
			<literallayout>
			<![CDATA[
1. 定期备份机制
2. 代码注释要求
3. 代码访问需要更高层的批准
4. 详细的部署文档
等等
			]]>
			</literallayout>
			<para>我认为源码管理主要有两种手段，技术手段与管理手段。</para>

			<para>我先谈谈管理手段：例如通常通过规章制度，责任追究等等手段，要求员工达到规范标准，但通常执行力都会打折，无法达到预期，人的不稳定性因素太多。往往发现员工没有按照规范操作为时已晚，将该员工辞退也无法挽回公司的损失。</para>
			<para>就如公司规章制度写的清清楚楚，要求员工提交代码到版本库，但各种原因没有被执行，当代码丢失，从上至下追究责任，公司的损失无法挽回。</para>
			<para>所以我主张技术手段：例如源码如果发布到线上，必须经过版本库，只能使用自动部署，不允许程序员私自将代码交给运维手工部署。另外发布代码的同事，可以不提供生产服务器登陆权限，他只能通过工具发布代码。</para>
			<para>部署流程如下：</para>
			<literallayout>
			<![CDATA[
源码(程序员) 提交到development 分支UAT阶段 ----> 合并到 testing 分支Beta阶段（主管合并，程序员没有权限）------> master 分支(主管合并) -----> 自动部署系统(运维) ----> 生产服务器。
				]]>
			</literallayout>
			<para>这样通过技术手段防止了代码因员工离职，硬盘损坏等等原因，导致代码丢失的可能。</para>
			<para>代码发布者也无需对照部署文档，手动登陆服务器逐条按照部署说明书操作，防止了人员误操作，也提高了部署效率，节省了人力成本，通常在5分钟之内可以完成所有部署。</para>
		</section>
		<section>
			<title>故事二</title>
			<para>我再来举另外一个例子，就是开发中的编码规范，很多软件企业都有是不是？	</para>
			<literallayout>
			<![CDATA[
例如要求程序员：
if
(){}
要写成
if ()
{
...
}
等等要求不一一列举，甚至组织代码评审解决编码规范问题。

我的建议为什么不在IDE上设置自动格式化，或者在svn/git提交的时候通过hook调用格式化程序。甚至可以做到，在提交的时候编译，编译不通过，就提交不上去。
			]]>
			</literallayout>
		</section>
		<section>
			<title>故事三</title>
			<para>
				管理层要求运维每天发送服务器状态报告，运维人员需要登录每个服务器或者从cacti等工具中获得服务器运行状态数据，然后制作一个报告文档，每天给各位发送一次。
			</para>
			<para>运维需要一个专职人员做这个报告，这种报告几乎没有人看，就像“人民日报” 人民从来不看。</para>
			<para>当运维事故该出现的时候还是会出现，老板一个一个骂，扣工资，扣奖金，运维觉得委屈，公司受到损失。平日里的这些工作并不能避免运维事故，也不能改善运维工作。</para>

		</section>
		<section>
			<title>故事四</title>

			<para>在举一个例子，运维工作要求备份数据，制定规范，A员工负责备份，B 员工负责检查A员工的备份。这个流程没有任何问题。</para>
			<para>结果两年以后出事了，需要恢复数据，发现A没有备份，而B在一年前就再没有检查A的工作。</para>
			<para>起初前一年还是按流程备份，后来A发现B不再严格检查工作，备份工作逐渐减少，最后停止了备份，一直相安无事，直到事发。</para>

		</section>
		<section>
			<title>故事五</title>
			<para>我曾经遇到过一个兢兢业业的管理者，他制定规范，要求值班的同事7*24小时，每间隔一定的时间做一次操作，验证系统正常运行，以便能够第一时间通知运维处理故障。</para>
			<para>值班的同事偶尔偷懒，他就半夜起来监控他们工作。一个打工者能做到如此，真让人佩服。</para>
			<para>但是故障的频率依然没有改观，运维仍是每天疲于奔命的救火。</para>
			<para>但是我们有更好的方法，真的不必如此操劳且效率低下。</para>
		</section>
		<section>
			<title>总结</title>
			<para>上面的几个故事是一个无休止的死循环</para>
			<screen>
			<![CDATA[
出问题 -> 领导发火 -> 行政处分 -> 制定规范 -> 执行规范 -> 慢慢淡忘 -> 后续无人跟进 -> 石沉大海 -> 继续出问题。
			]]>
			</screen>

			<para>流程与规范的制定需要需要满足几个条件：简单，易掌握，易执行，可重复执行</para>
			<para>员工考虑的是尽快完成工作，规范不应成为完成工作的负担。</para>
			<para>只有机器人才能100%执行流程，任何由人执行的流程规范都不可能做到100%执行，在军队中即使是严格训练过的士兵也常常犯错。</para>
			<para>很多管理者将其归咎为 “执行力” 弱，我并不这么认为。有些犯错并不是执行力问题，也不是敬业度问题，可能需要从心理学角度解释。这是我在阅读几本心理学著作后发现的。</para>
			<para>我觉得很多规范是形式主义。我一向主张实用主义。</para>
			<para>通过技术手段可能避免很多没有意义规范，开发自动化，测试自动化，运维自动化，这是趋势也是我的努力的目标。</para>
		</section>

		<section>
			<title>案例分析：怎样避免电梯伤人事件再发生</title>
			<para>电梯与我们的生活是密不可分，生活在城市，很难想象如果没有电梯会怎么样。</para>
			<simplesect>
				<title>事件起因、经过和结果</title>
				<para>几年前有一起电梯（手扶梯）伤人事件，事情的起因是这样的，一家商场电梯维修了一半，为了不影响商场运业，维修人员几把盖板临时盖上，供顾客使用。</para>
				<para>事件的经过是这样的，一位妈妈带着孩子来到商场购物，一脚踩在电梯盖板上，盖板突然反转，顾客直接掉进电梯，母亲顺势将孩子抛出，然后就被搅入传送机构，血肉模糊，最后惨死在电梯里。</para>
				<para>最后我们看看处理结果，事件发生之后，新闻与评论无非是指责商场，指责电梯维保，指责生产厂家，探讨电梯行业等等舆论层面。商场马上启动公关，进入司法理赔谈判等等。</para>
				<para>我们看到舆论只会去职责，从未有人提出过解决方案。</para>
			</simplesect>
			<simplesect>
				<title>怎样彻底解决电梯伤人，让这种事件不能再次发生呢？</title>
				<para>社会舆论一边倒“管理层面”，也就是提高商场服务意识，工作人员敬业程度等等，但这些因素是不可控。</para>
				<para>另一种是“技术层面”，通过技术手段解决电梯安全问题。在我看来此次事件是电梯设计缺陷所致。</para>

				<formalpara>
					<title>电梯伤人事件解决方案</title>
					<para>现在我来说说技术层面“电梯伤人事件解决方案”。</para>
					<para>首先在电梯盖板下面安装一个按压开关，当盖板安装好后，开关处于下压状态，电路导通，通过继电器，开电梯电源。</para>
					<para>一旦盖板被打开，电梯立即停止供电。进一步延伸功能，当盖板被打开，停止电梯供电，同时触发警报。</para>
					<para>怎么样？成本不足5元钱，安装两个零件彻底解决了安全问题， 在现有的电梯设备上改装，只需要几个小时就可以完成。</para>
					<para>这种技术层面的解决方案，远比媒体/舆论期望的“管理层面解决方案”要好。</para>
					<para>我们可以在很多方面作出技术改善，安装各种传感器，实现工作状态实时监控，故障报警，自动响应等等。</para>
				</formalpara>
				<para>当下需要重点解决的是下面几点：</para>

				<formalpara>
					<title>实时监控</title>
					<para>目前电梯都是每年巡检一次，使用过程中出现问题再找厂商上面维修。这样的检查是远远不够的，往往电梯出现问题，轻者将人困在其中，重者就会伤人。</para>
					<orderedlist>
						<title>例如我们可以采用很多传感器技术监控电梯：</title>
						<listitem>电梯们安全，目前很多电梯又具备防止夹人的功能，老式通过限位开关的那种逐渐淘汰，新的基本采用光传感器，我遇到过几次故障，例如反复无法关门。 我认为可能做很多改进，例如反复关门超过3~5次就发出报警，停止电梯运行。</listitem>
						<listitem>红外空间扫锚，当电梯停止运行（无人乘坐），扫描电梯室内热源，热源超过5分钟，发出警报。这种情况可能是小孩被困或者老人晕倒。</listitem>
					</orderedlist>
				</formalpara>
				<formalpara>
					<title>远程监控</title>
					<para>远程监控是指电梯传感器收集的数据，实时或定时发送到厂家，用作数据分析，归档备份</para>
				</formalpara>
				<formalpara>
					<title>故障报警</title>
					<para>目前主要靠人来判断故障，然后决定是否需要通知厂商维修。</para>
					<para>有了上面的监控数据，电梯出现故障厂家第一时间知道，并上门维修。</para>
					<para>甚至厂家可以可通收集的监控数据，通过技术人员分析，决定是否远程遥闭电梯。</para>
				</formalpara>
				<formalpara>
					<title>自动响应</title>
					<para>是电梯智能化的标志，电梯能根据预先设定的程序，对轻微故障，作出自动响应。如上面谈到的“电梯们安全”，“红外空间扫锚”。</para>
				</formalpara>
				<formalpara>
					<title>电梯行业应该引入4S概念</title>
					<para>目前电梯市场十分混乱，我认为电梯行业应该引入4S概念。</para>
					<itemizedlist>
						<title></title>
						<listitem>是一种集销售（Sale）	</listitem>
						<listitem>零配件（Sparepart）</listitem>
						<listitem>售后服务（Service）</listitem>
						<listitem>信息反馈（Survey）</listitem>
					</itemizedlist>
					<para>四位一体的销售企业，让电梯的销售，配件，售后保养，以及问题反馈流程化，标准化。</para>
				</formalpara>
			</simplesect>
		</section>

	</section>	
	&section.risk.fishbone.xml;
	<section id="itsm.incident">
		<title>Incident Management(突发事件管理)</title>
		<section>
			<title>突发事件处理流程</title>
			<graphic format="png" fileref="../images/incident.png" srccredit="neo" />
		</section>
		<section>
			<title>事件处理方式</title>
			<para>很多人顺着简单而直接的“事件 > 反应 > 结果” 连锁行为来反应。</para>
			<para>遇有状况发生，第一时间不加思索地反映，造成的结果不但于事无补甚至造成二次故障。</para>
			<para>这种不由自主或未经过思考的反应有时会导致灾难性的后果。</para>
			<para>更好的选择是：</para>
			<screen>
			<![CDATA[
事件 -> 结果 -> 反应
			]]>
			</screen>
			<para>说白了就是，遇事想清楚再动手不迟。</para>
		</section>

	</section>
	&section.risk.monitor.xml;
</chapter>