<?xml version="1.0" encoding="UTF-8"?>
<!-- $Author: netkiller $ -->
<!-- $Id: chapter.sqa.xml 495 2012-11-23 02:50:46Z netkiller $ -->
<chapter id="质量管理">
	<title>质量管理</title>
	<subtitle>SQA (Software Quality Assurance) / SCM (Software Configuration Management)</subtitle>
	<para>是为了确保项目达到客户所规定的质量要求所实施的一系列管理过程。它包括质量规划，质量控制和质量保证等。</para>
	<section id="无缺点管理">
		<title>无缺点管理</title>
		<subtitle>zero defects management</subtitle>
		<para>由于周末经常外出自驾游，途中会经过东莞、惠州、观澜、大鹏等工业区，哪里的工厂给过一个很深的印象，每个工厂楼顶会有一个巨大的牌匾“已通过ISO 9001”。这让我开始思考以往的质量管理。</para>
		<orderedlist numeration="arabic" spacing="compact">
			<title>我认为质量管理方法可以分为两类：</title>
			<listitem>
				<para>考察过程</para>
			</listitem>
			<listitem>
				<para>检验结果</para>
			</listitem>
		</orderedlist>
		<para>传统劳动密集型产业可以采用考察过程（例如ISO9001），制定产生规范，产生预期结果。这种方法对于资本密集型产业或知识密集型产业并不适合。所以另一种检验结果的质量管理办法孕育而生。</para>
		<orderedlist>
			<title>简单的说，这种质量管理办法是：</title>
			<listitem>
				<para>首先制定预期结果，</para>
			</listitem>
			<listitem>
				<para>项目完成后与期望结果对比</para>
			</listitem>
			<listitem>
				<para>输出验收报告</para>
			</listitem>
			<listitem>
				<para>根据验收报告做出处理</para>
			</listitem>
		</orderedlist>
		<para>这种管理的方法存在很多弊端，工作中你会遇到下面这些问题：</para>
		<orderedlist>
			<title>考察结果的质量管理存在的弊端：</title>
			<listitem>
				<para>无论如何你都不可能把所有预期结果都能考虑到</para>
			</listitem>
			<listitem>
				<para>所做的工作仅仅为了满足预期结果的验收</para>
			</listitem>
			<listitem>
				<para>对已知缺陷视而不见</para>
			</listitem>
			<listitem>
				<para>而对于验收人员，验收报告以外的缺陷，心照不宣</para>
			</listitem>
			<listitem>
				<para>无法预见缺陷，发现缺陷为时已晚,已经到了项目尾声。</para>
			</listitem>
		</orderedlist>
		<para>举一个例子，国家检验奶粉有一个标准，一些不法企业在奶粉中添加三聚氰胺，可以通过检测，最终酿成惨剧。</para>
		<para>无论是考察过程的质量管理还是检验结果的质量管理，这两种管理方式仅仅能做出合格的产品，无法做出精品。</para>
		<para>丰田公司的一位高级管理人员说：“我们不应使用全面质量管理，因为这种管理充其量只能让缺点减至10%。如果我们生产400万辆汽车的话，便会有40万人购得一辆带毛病的车，这是生产与用户之间的最大危机，而推行无缺点管理则会消除这种现象。”现在，领先的日本公司逐渐由全面质量管理转向无缺点管理。</para>
		<para>无缺点管理的范围已经超出了产品质量范畴</para>
		<orderedlist>
			<listitem>
				<para> 计划缺陷</para>
			</listitem>
			<listitem>
				<para> 设计缺陷</para>
			</listitem>
			<listitem>
				<para> 产品缺陷</para>
			</listitem>
			<listitem>
				<para> 研发缺陷</para>
			</listitem>
			<listitem>
				<para> 开发缺陷</para>
			</listitem>
			<listitem>
				<para> 工艺缺陷</para>
			</listitem>
			<listitem>
				<para> 材料缺陷</para>
			</listitem>
			<listitem>
				<para> 流程缺陷</para>
			</listitem>
			<listitem>
				<para> 设备缺陷</para>
			</listitem>
			<listitem>
				<para> 人的缺陷</para>
			</listitem>
			<listitem>
				<para> 生产缺陷</para>
			</listitem>
			<listitem>
				<para> 服务缺陷</para>
			</listitem>
			<listitem>
				<para> 市场缺陷</para>
			</listitem>
		</orderedlist>

	</section>

	<section id="自动化测试如何破局">
		<title>自动化测试如何破局？</title>
		<para>最近面试软件自动化测试工程师，感想颇多。</para>
		<para>面试者都来自大厂或大厂外包，华为，oppo，顺丰，沃尔玛，百丽，腾讯，字节……
			开始以为捡到宝了，即使没吃过猪肉也见过猪跑吧，起码参与过自动化测试，面试后大失所望。
		</para>
		<para>面试了很多工作十年的测试工程师仍然在做功能测试，或是功能测试为主，自动化测试打酱油。</para>
		<para>什么是打酱油？我们有自动化测试，我们做了。但是自动化对工作的贡献微乎其微，也就是说自动化测试并没有真正为企业带来价值，最后自动化测试脚本不在有人维护，被人遗忘。</para>
		<para>问及为什呢自动化测试流于形式？ 实施自动化测试最终摆脱不了失败厄运，会不了了之。每个人都给出无数理由，在我看来是无数借口。</para>
		<para>十年前我曾经写过关于自动化测试为什么难以普及的文章，时隔十年，都2021年了，自动化软件测试普及程度跟10几年前情况差不错。究竟问题出在哪里呢？</para>
		<para>如果你是管理层，你会发现，自动化测试工程师人在招聘，事在做，钱在花，但是没有成绩。仍然人工测试为主，自动化辅助。</para>
		<orderedlist>
			<title>难道无法实现自动化为主，人工为辅吗？此前我在一直在外企工作，为什么外企能做到自动化为主的测试呢？ 我认为有一下几点：</title>
			<listitem>认知的问题</listitem>
			<listitem>生态问题</listitem>
			<listitem>技术问题</listitem>
			<listitem>能力问题</listitem>
			<listitem>氛围问题</listitem>
		</orderedlist>
		<section>
			<title>认知问题</title>
			<para>你问测试人员我们有没有做自动化，答案是：</para>
			<simplesect>
				<title>认为自动化测试替代不了人工测试</title>
				<para>这话没毛病，确实不能100%替代，但是自动化测试可以干80%的活。剩下20%人来干。</para>
			</simplesect>
			<simplesect>
				<title>需求迭代快不适合做自动化，迭代快常常导致自动化脚本跑不通</title>
				<para>我不这么认为，我们通过持续集成运行自动化测试脚本，一旦发现流水线测试失败就会立即修复自动化测试脚本。只要紧跟开发，开发动，我就动，联动开发，就可以解决这种问题。写测试脚本的工作量远没有开发的工作量和强度大。更多时候只是修改定位元素标签而已。</para>
				<para>人工测试前首先要通过自动化测试，这样可以避免盲目测试。
					也就是人工测试走了大部份流程后才发现往下走不通了，此时已经浪费了时间，为什么不让自动化程序去发现问题呢？
				</para>
			</simplesect>
		</section>
		<section>
			<title>生态的问题</title>
			<para>在国内包括大厂，软件自动化测试处于很低的水平，测试人员水平也相对低于其他团队，例如开发和运维。为什么 DevOps（运维自动化）在国内能风生水起？因为DevOps 在为企业创造价值。DevOps 降低了IT成本，解决企业面临的众多IT痛点。但是你可能不知道，DevOps 思想刚刚进入国内的时候，很多运维人员是抵触的，他们不相信自动化，他们不敢在生产环境实施自动化，在相当长的几年中，DevOps 也是打酱油的状态，只在开发环境中部署。</para>
			<para>管理层重视程度，管理层能力，管理层认知都决定最终结果。</para>
			<para>管理层重视自动化测试，但是能力又无法推动。
				招聘也存在问题，管理层的认知天花板决定他招聘进来的员工天花板。
			</para>
			<para>即一流人才做面试官，只能招聘到二流人才，二流面试官，只能招聘来三流人才，以此类推。
				最终一个乌合之众的测试团队被攒出来。
			</para>

		</section>
		<section>
			<title>技术的问题</title>
			<para>互联网技术越来越复杂，HTML 4.0 的时候只有 form 表单提交，那时做自动化测试畅通无阻，非常顺利，后来有了ajax 和复杂UI，导致自动化测试难以进行。</para>
			<para>很多测试工程师的开发水平仅限于测试，没有从事过前后端开发，遇到问题被卡住，解决不了，就放弃了自动化测试。</para>
		</section>
		<section>
			<title>能力问题</title>
			<para>测试团队能力不足是最大问题，多数测试人员的职业生涯规划是失败的，从功能测试走到自动化测试的人非常少。</para>
			<orderedlist>
				<title>成为自动化测试工程师，需要三个因素：</title>
				<listitem>自驱力</listitem>
				<listitem>外驱力</listitem>
				<listitem>环境因素</listitem>
			</orderedlist>
			<para>自驱力是自我学习的动力，外驱力是外部施压强制员工学习，以满足岗位需要，两种力都具备后还需要有环境，包括学习环境（氛围）应用环境（学以致用），实战机会等等。</para>
		</section>
		<section>
			<title>氛围问题</title>
			<para>很多公司的想法是招聘一两个自动化测试人员，更多配置是功能测试。</para>
			<para>这个想法就是错误的，从一开始就注定了要以功能测试为主。尤其是当测试组的leader是功能测试者后，他会更坚信自动化测试替代不了人工测试，在自动化测试短期没有成绩的时候，他会本能否定自动化测试，最终将会从自动化专人工。</para>
			<para>由于自动化测试人员少，就会有孤独感，遇到问题解决不了，没有人沟通，工作容易被卡住。</para>
			<para>所以氛围很重要，要打造学习型团队。提供分工，教练，合作，咨询，培训， 提升团队整体素质。</para>
		</section>
		<section>
			<title>最后</title>
			<para>老生常谈，测试部门负责人的认知和格局天花板决定了测试团队的天花板，以及在自动化测试领域能走多远。</para>
		</section>
	</section>

	<section id="为什么自动化测试难以推广">
		<title>为什么自动化测试难以推广</title>
		<para>2005 第一次接触自动化测试，十年已经过去了，着眼身边的企业，真正实施自动化测试的企业非常少。 大部分企业，测试仍然处在，点鼠标阶段。测试人员通常是验收交付，而没有参与整个软件开发周期。</para>
		<section>
			<title>为什么自动化测试难以实施</title>
			<para>为什么自动化测试难以实施，我想有几个问题，阻碍了自动测试普及。 其实懂得自动化测试工具的人还是很多的，自动化测试难以实施，并不是缺乏技术人才。Load Runner, QTP 等等很多测试人员都会使用，为什么他们放弃这些工具，改用手动测试呢？</para>
			<orderedlist>
				<title></title>
				<listitem>90%测试仍然处在功能测试</listitem>
				<listitem>很多测试人员没有开发背景</listitem>
				<listitem>测试角色，没有贯穿整个软件开发周期</listitem>
				<listitem>各种问题阻碍了自动化脚本</listitem>
				<listitem>在中国测试人员人力成本太低</listitem>
			</orderedlist>
			<para>随着技术发展，软件的多样性，已经不局限于基于CS结构的GUI, 基于BS浏览器WEB UI。例如目前的安卓系统，苹果IOS系统，微软的 Windows Mobile 系统等等。 还有一些非人机交互界面，各种协议/接口，例如json,bson,xml-rpc,soap,mq(message queue)我认为这些都应该纳入自动化测试范畴。 这就需要测试人员具有一定的开发能力，且测试上述内容速要广泛的技术知识支撑。</para>
			<orderedlist>
				<title>我认为高级测试工程师，需要具备以下能力：</title>
				<listitem>嗅探器的使用</listitem>
				<listitem>Debug工具</listitem>
				<listitem>负载均衡技术</listitem>
				<listitem>TCP/IP，UDP</listitem>
				<listitem>了解各种协议族</listitem>
				<listitem>渗透/注入</listitem>
				<listitem>数据库与缓存</listitem>
				<listitem>搜索引擎</listitem>
				<listitem>文件系统与存储</listitem>
			</orderedlist>
			<para>就WEB测试而言，涉及的内容就太广泛了，从浏览器->WEB服务器->APP服务器->缓存->数据库，中间会经过各种代理，负载均衡，分布式文件系统等等。</para>
			<para>配置这样一个测试环境都已经非常不容易，幸好我们可以采用自动化运维干这件事。</para>
		</section>
		<section id="是什么阻碍了自动化测试">
			<title>是什么阻碍了自动化测试？</title>
			<orderedlist>
				<title></title>
				<listitem>各种UI特效</listitem>
				<listitem>验证码，包括手机，图形，语音......</listitem>
				<listitem>浏览器支持</listitem>
				<listitem>第三方插件(Flash,ActiveX...)</listitem>
				<listitem>技术封闭</listitem>
			</orderedlist>
			<para>互联网的快速发展 Load Runner, QTP 等等软件，我认为已经跟不上互联网的快速了，他们仍然按照传统周期发布软件更新。 而互联网需要的是快速变化，互联网应用程序开发者，需要体验更多的创新功能，软件软件发布周期至少一年一个版本。真的太慢了。</para>
			<para>互联网不断加入的新技术成为了自动化测试障碍，传统软件无法支持这些新技术，甚至向微软这样的企业技术跟进都显得不给力。</para>
			<para>Windows Automation 3.0 是非常高大上玩意，但是你在Microsoft官网能找到的资料，少之甚少，我不知道微软的目的何在。</para>
			<para>只有 Load Runner, QTP 这些公司与微软合作，才能拿到Windows Automation API。</para>
		</section>
		<section id="中国测试人员的人力成本">
			<title>中国测试人员的人力成本</title>
			<para>测试人员的薪水在开发团队中应该是处于中下等的。与高级程序员，软件架构师是有很大差距的。这也造成了自动化测试难以实施的原因。</para>
			<para>我们需要从高级程序员，软件架构师转测试的高级测试人员。</para>
			<para>我们需要黑客级的测试人员！！！</para>
		</section>
	</section>

	<section id="BUG率的误区">
		<title>BUG率的误区</title>
		<para>在做绩效的时候，你是否会考察BUG率？你是否认为BUG越少，团队越好？BUG多的员工能力就有问题？……</para>
		<section>
			<title>BUG 叠加</title>
			<para>我们首先要明白BUG叠加概念，什么是BUG叠加概念呢？</para>
			<para>我举一个例子，就以我们日常都会接触到的购物平台为例：</para>
			<screen>
			<![CDATA[
用户注册 -> 浏览商品 -> 购物车 -> 下单 -> 支付 -> 完成交易
			]]>
			</screen>
			<para>所谓BUG叠加就是，前面功能会影响后面功能产生BUG，例如 购物车是依赖商品展示的，而下单过程又依赖购物车和商品展示，以此类推。从用户起点到业务流程终点，每经过一个节点，都会产生新数据，数据不断发生运算变化，最终存储在数据库中。</para>
			<para>这就完成了吗？没有。交易完成之后数据还要进入公司的财务系统做账，开票等等。还会进行数据二次提炼，通过ETL等手段，将数据同步到数据仓，例如BI大数据分析等等。</para>
			<para>这样越是靠近用户端的开发功能越简单，产生BUG的数量越少。越是靠近数据末端，交互越复杂，交互过程会完成新增数据，数据经过多次转发，重新计算，重组等等，越来越复杂，这造成了开发复杂，测试复杂，BUG率飙升。</para>
		</section>
		<section>
			<title>BUG 分类</title>
			<para>我们将系统不能工作的一切原因统称为 BUG，对BUG 没有分类统计。</para>
			<para>很多时候 BUG 成为了待办事项。最终体现不出真能的质量数据。</para>
		</section>
	</section>
	<section id="敏捷开发为什么会以失败告终">
		<title>敏捷开发为什么会以失败告终？</title>
		<para>盘点一下职业生涯几次做软件质量失败的经历，供大家参考，吸取经验和教训。</para>
		<section>
			<title>首先，思考为什么最近15年软件质量体系没有新概念出来？</title>
			<para>瀑布模型 2000年之前就存在，西方从 70年带开始摸索软件开发模型，80/90年代逐渐成熟，当时有一本书叫《软件工程》。2003年国内出现XP极限编程，2005年敏捷横行。印度阿三在 2000年就搞出了 CMMI 我们是在2005年通过CMMI5，如今我已经全部忘记。</para>
			<para>最近15年为什么没有出现新的概念？</para>
			<para>西方为什么不再主导制定软件质量管理体系？</para>
		</section>
		<section>
			<title>然后，我们再来盘点一下最近几年西方软件领域主导者都在做什么？</title>
			<para>你会发现他们的关注点从 SQA 转向了 OKR，最近几年最火的概念是 OKR，几乎硅谷企业齐刷刷的上 OKR。Google 今年5月又从 OKR 转向更先进的 GRAD，谷歌启用新系统GRAD（Googler Reviews and Development）这件事情，又在硅谷掀起风浪，一大波硅谷企业会参考谷歌的 GRAD 制定出适合自身企业的各种 RAD。</para>
			<para>为什么会这样？抓软件质量不如抓绩效出产的价值高。下面我会分析出现这种现象的原因。</para>
		</section>
		<section>
			<title>失败原因</title>
			<para>从很多同事那里得到数据，很多企业或团队实施敏捷都有失败的经历，为什么会失败？失败原因总结如下：</para>
			<section>
				<title>水土不服</title>
				<para>多年职业生涯，ISO，GB国标，XP，敏捷，CMMI5 我全部参与或主导过，不能说全失败，不经过裁剪的实施几乎都会面临水土不服。最终流于形式，填表格走流程。</para>
				<para>很多流程的设计采用的加法思维，认为只要考虑到每个节点，并作出响应，就能解决所有问题，这使得流程变长，没有提升效率，反而增加了管理内耗。</para>
			</section>
			<section>
				<title>年轻的团队</title>
				<para>很多时候，只要让团队整体工作经验增加1年，软件质量会带来质的改变。</para>
				<para>工作中发现大量BUG是因为开发人员对业务不熟，对语言不熟，对SDK不熟，对第三方应用不熟。</para>
				<orderedlist>
					<listitem>经验丰富的产品经理需求变更的频率要比年轻的产品经理少很多。</listitem>
					<listitem>经验丰富的开发工程师产生的BUG更少。</listitem>
					<listitem>经验丰富的测试工程师有更多的手段发现BUG。</listitem>
					<listitem>经验丰富的运维意味着更少的犯错，更少的线上事故。</listitem>
					<listitem>无论是产品经理还是工程师的成长都需要在不断试错的环境中提高的，过于年轻的团队，企业就要承受试错成本。</listitem>
				</orderedlist>
			</section>
			<section>
				<title>流程设计的误区</title>
				<para>企业诉求：找到一种可重复执行，减少犯错，提高效率的方式和方法。但是，往往会走偏，不断画蛇添足，增加内耗。</para>
				<para>员工诉求：别妨碍我做事，我想尽早完成工作，下班走人。结果，员工会想出各种对策来规避流程和规范。</para>
				<para>几乎所有的技术企业都会重视技术规范，为此制定各种规范，并要求员工严格执行。同时员工会想出各种对策，就这样形成了潜规则。</para>
				<para>流程设计走入误区是管理层擅长制定乌托邦式的流程与规范，认为控制了流程的每个节点，就能产生一个好的结果。随便拿出一条流程都堪称完美，无懈可击，但没有考虑到执行结果，流程规范在执行过程中每个环节都会出现问题，都不可能100%执行，只有机器人才能100%执行流程，任何由人执行的流程规范都不可能做到100%执行，即使是命令化管理的军队，都不能做到100%执行每条命令，严格训练过的士兵也常常犯错，甚至很多命令传达到一线会走样。</para>
				<para>流程设计的任何一个环节出现问题就如同多米诺骨牌，造成连锁反应，最终无法控制。</para>
				<para>人们的思维习惯是，在流程的执行过程中，发现问题，就增加一个检查点，甚至为此新增一个流程。而不是去优化流程减掉某个节点。</para>
				<para>流程与规范的制定需要需要满足几个条件：简单，易掌握，易执行，可重复执行</para>
				<para>员工考虑的是尽快完成工作，规范不应成为完成工作的负担。</para>
				<para>很多管理者将其归咎为 “执行力” 弱，我并不这么认为。有些犯错并不是执行力问题，也不是敬业度问题，可能需要从心理学角度解释，这是人性的问题。</para>
				<para>我们不应该通过管理手段约束员工，而是应该从技术手段避免很多没有意义规范，让开发自动化，让测试自动化，让运维自动化，机器是不会犯错的，这是趋势也是我的努力的目标。</para>
				<para>先写到这里，后面有时间继续补充	</para>
			</section>
		</section>
	</section>
</chapter>