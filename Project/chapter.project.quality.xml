<?xml version="1.0" encoding="UTF-8"?>
<!-- $Author: netkiller $ -->
<!-- $Id: chapter.sqa.xml 495 2012-11-23 02:50:46Z netkiller $ -->
<chapter id="sqa">
	<title>质量管理</title>
	<subtitle>SQA (Software Quality Assurance) / SCM (Software Configuration Management)</subtitle>
	<para>是为了确保项目达到客户所规定的质量要求所实施的一系列管理过程。它包括质量规划，质量控制和质量保证等。</para>
	<section id="无缺点管理">
		<title>无缺点管理</title>
		<subtitle>zero defects management</subtitle>
		<para>由于周末经常外出自驾游，途中会经过东莞、惠州、观澜、大鹏等工业区，哪里的工厂给过一个很深的印象，每个工厂楼顶会有一个巨大的牌匾“已通过ISO 9001”。这让我开始思考以往的质量管理。</para>
		<orderedlist numeration="arabic" spacing="compact">
			<title>我认为质量管理方法可以分为两类：</title>
			<listitem>
				<para>考察过程</para>
			</listitem>
			<listitem>
				<para>检验结果</para>
			</listitem>
		</orderedlist>
		<para>传统劳动密集型产业可以采用考察过程（例如ISO9001），制定产生规范，产生预期结果。这种方法对于资本密集型产业或知识密集型产业并不适合。所以另一种检验结果的质量管理办法孕育而生。</para>
		<orderedlist>
			<title>简单的说，这种质量管理办法是：</title>
			<listitem>
				<para>首先制定预期结果，</para>
			</listitem>
			<listitem>
				<para>项目完成后与期望结果对比</para>
			</listitem>
			<listitem>
				<para>输出验收报告</para>
			</listitem>
			<listitem>
				<para>根据验收报告做出处理</para>
			</listitem>
		</orderedlist>
		<para>这种管理的方法存在很多弊端，工作中你会遇到下面这些问题：</para>
		<orderedlist>
			<title>考察结果的质量管理存在的弊端：</title>
			<listitem>
				<para>无论如何你都不可能把所有预期结果都能考虑到</para>
			</listitem>
			<listitem>
				<para>所做的工作仅仅为了满足预期结果的验收</para>
			</listitem>
			<listitem>
				<para>对已知缺陷视而不见</para>
			</listitem>
			<listitem>
				<para>而对于验收人员，验收报告以外的缺陷，心照不宣</para>
			</listitem>
			<listitem>
				<para>无法预见缺陷，发现缺陷为时已晚,已经到了项目尾声。</para>
			</listitem>
		</orderedlist>
		<para>举一个例子，国家检验奶粉有一个标准，一些不法企业在奶粉中添加三聚氰胺，可以通过检测，最终酿成惨剧。</para>
		<para>无论是考察过程的质量管理还是检验结果的质量管理，这两种管理方式仅仅能做出合格的产品，无法做出精品。</para>
		<para>丰田公司的一位高级管理人员说：“我们不应使用全面质量管理，因为这种管理充其量只能让缺点减至10%。如果我们生产400万辆汽车的话，便会有40万人购得一辆带毛病的车，这是生产与用户之间的最大危机，而推行无缺点管理则会消除这种现象。”现在，领先的日本公司逐渐由全面质量管理转向无缺点管理。</para>
		<para>无缺点管理的范围已经超出了产品质量范畴</para>
		<orderedlist>
			<listitem>
				<para> 计划缺陷</para>
			</listitem>
			<listitem>
				<para> 设计缺陷</para>
			</listitem>
			<listitem>
				<para> 产品缺陷</para>
			</listitem>
			<listitem>
				<para> 研发缺陷</para>
			</listitem>
			<listitem>
				<para> 开发缺陷</para>
			</listitem>
			<listitem>
				<para> 工艺缺陷</para>
			</listitem>
			<listitem>
				<para> 材料缺陷</para>
			</listitem>
			<listitem>
				<para> 流程缺陷</para>
			</listitem>
			<listitem>
				<para> 设备缺陷</para>
			</listitem>
			<listitem>
				<para> 人的缺陷</para>
			</listitem>
			<listitem>
				<para> 生产缺陷</para>
			</listitem>
			<listitem>
				<para> 服务缺陷</para>
			</listitem>
			<listitem>
				<para> 市场缺陷</para>
			</listitem>
		</orderedlist>

	</section>

	<section id="为什么自动化测试难以推广">
		<title>为什么自动化测试难以推广</title>
		<para>2005 第一次接触自动化测试，十年已经过去了，着眼身边的企业，真正实施自动化测试的企业非常少。 大部分企业，测试仍然处在，点鼠标阶段。测试人员通常是验收交付，而没有参与整个软件开发周期。</para>
		<section>
			<title>为什么自动化测试难以实施</title>
			<para>为什么自动化测试难以实施，我想有几个问题，阻碍了自动测试普及。 其实懂得自动化测试工具的人还是很多的，自动化测试难以实施，并不是缺乏技术人才。Load Runner, QTP 等等很多测试人员都会使用，为什么他们放弃这些工具，改用手动测试呢？</para>
			<orderedlist>
				<title></title>
				<listitem>90%测试仍然处在功能测试</listitem>
				<listitem>很多测试人员没有开发背景</listitem>
				<listitem>测试角色，没有贯穿整个软件开发周期</listitem>
				<listitem>各种问题阻碍了自动化脚本</listitem>
				<listitem>在中国测试人员人力成本太低</listitem>
			</orderedlist>
			<para>随着技术发展，软件的多样性，已经不局限于基于CS结构的GUI, 基于BS浏览器WEB UI。例如目前的安卓系统，苹果IOS系统，微软的 Windows Mobile 系统等等。 还有一些非人机交互界面，各种协议/接口，例如json,bson,xml-rpc,soap,mq(message queue)我认为这些都应该纳入自动化测试范畴。 这就需要测试人员具有一定的开发能力，且测试上述内容速要广泛的技术知识支撑。</para>
			<orderedlist>
				<title>我认为高级测试工程师，需要具备以下能力：</title>
				<listitem>嗅探器的使用</listitem>
				<listitem>Debug工具</listitem>
				<listitem>负载均衡技术</listitem>
				<listitem>TCP/IP，UDP</listitem>
				<listitem>了解各种协议族</listitem>
				<listitem>渗透/注入</listitem>
				<listitem>数据库与缓存</listitem>
				<listitem>搜索引擎</listitem>
				<listitem>文件系统与存储</listitem>
			</orderedlist>
			<para>就WEB测试而言，涉及的内容就太广泛了，从浏览器->WEB服务器->APP服务器->缓存->数据库，中间会经过各种代理，负载均衡，分布式文件系统等等。</para>
			<para>配置这样一个测试环境都已经非常不容易，幸好我们可以采用自动化运维干这件事。</para>
		</section>
		<section id="是什么阻碍了自动化测试">
			<title>是什么阻碍了自动化测试？</title>
			<orderedlist>
				<title></title>
				<listitem>各种UI特效</listitem>
				<listitem>验证码，包括手机，图形，语音......</listitem>
				<listitem>浏览器支持</listitem>
				<listitem>第三方插件(Flash,ActiveX...)</listitem>
				<listitem>技术封闭</listitem>
			</orderedlist>
			<para>互联网的快速发展 Load Runner, QTP 等等软件，我认为已经跟不上互联网的快速了，他们仍然按照传统周期发布软件更新。 而互联网需要的是快速变化，互联网应用程序开发者，需要体验更多的创新功能，软件软件发布周期至少一年一个版本。真的太慢了。</para>
			<para>互联网不断加入的新技术成为了自动化测试障碍，传统软件无法支持这些新技术，甚至向微软这样的企业技术跟进都显得不给力。</para>
			<para>Windows Automation 3.0 是非常高大上玩意，但是你在Microsoft官网能找到的资料，少之甚少，我不知道微软的目的何在。</para>
			<para>只有 Load Runner, QTP 这些公司与微软合作，才能拿到Windows Automation API。</para>
		</section>
		<section id="中国测试人员的人力成本">
			<title>中国测试人员的人力成本</title>
			<para>测试人员的薪水在开发团队中应该是处于中下等的。与高级程序员，软件架构师是有很大差距的。这也造成了自动化测试难以实施的原因。</para>
			<para>我们需要从高级程序员，软件架构师转测试的高级测试人员。</para>
			<para>我们需要黑客级的测试人员！！！</para>
		</section>
	</section>

	<section id="打破软件自动化测试的格局">
		<title>打破软件自动化测试的格局</title>
		<section id="自动化测试的误区">
			<title>自动化测试的误区</title>
			<para>
				自动化测试仅仅被认为是替代人工，所以我们看到很多企业实施自动化测试仅仅是将现有的
				Test Case 转换成自动化脚本。
			</para>
			<para>
				这样做既没有提高测试整体水平，也没有改善测试结果。结果是通过手工能测试出来的问题自动化测试可以测试出来，手工测试不出来的问题自动化测试也没有测试出来。
			</para>
			<para>
				因为测试的观念仍停留在已有 Test Case 阶段，而 Test Case
				停留在业务流程测试的阶段。
			</para>
			<para>
				最终自动化测试仅仅是按照测试用例走一遍业务流程，完成业务流程的检验。
			</para>
		</section>
		<section id="分层与部署带来的问题">
			<title>分层与部署带来的问题</title>
			<para>
				随着技术发展，软件的多样性，测试已经不局限于基于CS结构的GUI测试,
				基于BS浏览器WEB UI测试。例如目前的安卓系统，苹果IOS系统，微软的
				Windows Mobile 系统等等也加入到自动化测试领域。
			</para>
			<para>
				应用软件也越来越复杂，例如：
			</para>
			<orderedlist numeration="arabic" spacing="compact">
				<listitem>
					<para>
						分层的变化：界面层，接口层，业务逻辑层，实体模型层
					</para>
				</listitem>
				<listitem>
					<para>
						部署的变化：从单机运行到双机热备份再到负载均衡，最近进化到分布式系统。
					</para>
				</listitem>
				<listitem>
					<para>
						存储的变化：关系型数据库，非关系型数据库，缓存数据库，搜索引擎数据库
					</para>
				</listitem>
			</orderedlist>
			<para>
				从下面的金字塔架构可以看出软件展示给用户的只有UI界面层
			</para>
			<programlisting>
    <![CDATA[
            /\
           /  \
          / UI \
         /------\
        /   API  \
       /----------\
      /   Service  \     
     /--------------\
    /    Component   \
   /------------------\  
  /      Database      \
 /______________________\
 ]]>
			</programlisting>
			<para>
				上面是软件的分层，一个软件经过部署后结构将会更复杂。
			</para>
			<programlisting>
        <![CDATA[
            /\
           /  \
          /CDN \
         /------\
        / WEB SER\
       /----------\
      / APP Server \     
     /--------------\
    / Message Queue  \
   /------------------\  
  / Cache|SearchEngine \
 /   Database| NoSQL    \ 
/________________________\
]]>
			</programlisting>
			<para>
				就WEB应用测试而言，涉及的内容就太广泛了，从浏览器-&gt;WEB服务器-&gt;APP服务器-&gt;缓存-&gt;数据库，中间会经过各种代理，负载均衡，分布式文件系统等等。
			</para>
			<para>
				我们测试要涵盖：
			</para>
			<orderedlist numeration="arabic" spacing="compact">
				<listitem>
					<para>
						CDN测试，域名解析测试，
					</para>
				</listitem>
				<listitem>
					<para>
						WEB UI测试，包括HTML,Ajax
					</para>
				</listitem>
				<listitem>
					<para>
						API 服务器测试，api
						是非人机交互界面，它是通过特定协议与API服务器交互通信。
					</para>
				</listitem>
				<listitem>
					<para>
						代码单元测试
					</para>
				</listitem>
				<listitem>
					<para>
						配置测试，配置管理过程中配置变更后的测试，含系统与应用
					</para>
				</listitem>
				<listitem>
					<para>
						安全测试，接口安全，认证，权限
					</para>
				</listitem>
				<listitem>
					<para>
						注入测试，JS注入，SQL 注入，Shell 注入
					</para>
				</listitem>
				<listitem>
					<para>
						缓存测试，命中率测试，包括CDN，WEB服务器，缓存服务器，搜索引擎
					</para>
				</listitem>
				<listitem>
					<para>
						压力测试，健壮性测试
					</para>
				</listitem>
				<listitem>
					<para>
						扩展性测试，水平扩展测试，垂直扩展测试
					</para>
				</listitem>
				<listitem>
					<para>
						高可用测试，集群测试
					</para>
				</listitem>
			</orderedlist>
		</section>
		<section id="压力测试存在的问题">
			<title>压力测试存在的问题</title>
			<para>
				请参考我的另一篇文章《压力测试中存在的问题》
			</para>
			<para>
				这里我要再单独强调压力测试，很多人的测试方法是有问题的。
			</para>
			<para>
				压力测试不是准备一台机器安装压力测试软件就可以开始测试的。
				压力测试的环境非常重要，很多工作多年的测试人员都没有意识到这个问题。
			</para>
			<para>
				压力测试有两个重点，一是压力测试环境的建设，二是压力测试顺序。
			</para>
			<section id="压力测试环境">
				<title>压力测试环境</title>
				<para>
					压力测试无论是单机还是网络，都需要一个好的压力测试环境，例如网络好比高速公路，如果公路成为瓶颈，你能测试出准确的数据吗？
				</para>
				<para>
					首先准备测试环境，如单机测试要考虑CPU速度，磁盘IO速度，RAID卡的速度，RAID卡缓存大小，内存速度，PCI—E总线速度，甚至会涉及多对称CPU相关配置，内存与CPU通道的问题......等等
				</para>
				<para>
					如果是测试分布式系统，除了上述单节点的注意事项，还要考虑到路由器/防火墙的包转发与连接数限制，交换机的背板带宽以及吞吐能力，负载均衡器的转发能力。
				</para>
				<para>
					操作系统要考虑内核参数优化，TCP/IP栈优化，各种服务器的配置。
				</para>
			</section>
			<section id="测试顺序">
				<title>测试顺序</title>
				<para>
					压力测试顺序的切入点非常重要，测试顺序上多数人是从UI（人机界面）切入，即由UI驱动业务逻辑，这种测试顺序是错误的，例如用户-&gt;浏览器-&gt;WEB服务器-&gt;APP服务器-&gt;缓存-&gt;数据库等等，这就带来很多问题。
				</para>
				<programlisting>
      <![CDATA[
\------------------/
 \    Web server  /
  \   App Server /
   \ Cache / MQ /
    \ Database /
     \ Disk IO/
      \      /
      ]]>
				</programlisting>
				<para>
					软件的性能瓶颈通常是沙漏型的，最大的瓶颈莫过于数据库，其他服务器的瓶颈我们都能从架构的角度去解决性能问题。
				</para>
				<para>
					所有我们应该先从数据库测试，首先确认数据库的配置优化是否能达到我们预期值。然后是缓存，消息队列，搜索引擎等等.....
				</para>
				<para>
					至此我们已经知道数据库，缓存，消息队列，搜索引擎不会成为我们压力测试中的瓶颈。接下就可以测试应用服务器和应用软件了。
				</para>
				<para>
					如果你的测试格局能够放大一点要考虑的远不止上述那些。
					你还需考虑硬件，网络，操作内核参数优化，TCP/IP栈优化，验证运维配置是否能满足我们需求等等.....。
				</para>
			</section>
			<section id="瓶颈分析">
				<title>瓶颈分析</title>
				<para>
					我们需要有一套监控解决方案，能够监控到硬件的性能，软件的性能。
				</para>
				<para>
					测试目的不是为了得出一个结果，告诉开发人员你的软件能支撑XXX并发，而是在我们测试中监控每项操作，计算出每个功能所用的时间，分析出性能的瓶颈，指导开发人员改进软件。
				</para>
				<para>
					监控分为外部监控与内部监控。
				</para>
				<para>
					外部监控是最容易实现的，有成熟的工具以及解决方案，CPU,内存，磁盘IO，网络流量等等。
				</para>
				<para>
					内部监控是指软件运行加载到内存中之后的变化状态，例如内存地址，变量，函数调用，动态链接库载入，打开文件句柄，Socket地址和数据包等等。
				</para>
			</section>
			<section id="指导开发">
				<title>指导开发</title>
				<para>
					通过数据，图表，快速定位软件存在的问题点，指导开发完成软件的改进
				</para>
			</section>
		</section>
		<section id="持续集成形同虚设">
			<title>持续集成形同虚设</title>
			<para>
				持续集成，自动化构建几乎每个测试团队都会实施，但实际境况并不理想，仅仅停留在工具配置的阶段。几乎没有人在生产环境上使用自动化构建。
			</para>
			<para>
				为什么持续集成无法应用到生产环境？
			</para>
			<para>
				（待续，敬请关注作者微信公众号，现在已经是早上6点中了，要去睡觉了）
			</para>
		</section>
		<section id="测试的终极目标">
			<title>测试的终极目标</title>
			<para>
				我认为测试不仅仅是完成按照测试用例完成软件验收，如果仅仅测试用户可见的UI(人机接口)是不能满足现代软件的测试需求的。
			</para>
			<para>
				测试者应该站在更高的角度看问题，测试者是有能力指导开发人员，改善软件的性能，健壮性，安全性，以及影响软件架构的设计。
				测试者需要有广泛的跨界知识支撑，要不断学习提高，打破现有格局。
			</para>
			<para>
				2016-12-03 06:30 AM
			</para>
		</section>
	</section>
	<section id="协议测试">
		<title>协议测试</title>

		<section>
			<title>What 什么是协议测试</title>
			<para>什么事协议？ 协议是计算机进程或网络中进行数据交换而建立的规则、标准或约定的集合。</para>
			<para>什么是协议测试? 协议测试就是软件界面与应用服务器间通信规则的测试。</para>
			<para>需要注意一点，协议测试不是接口测试，接口测试通常是RPC调用，例如基于HTTP SOAP, XML-RPM 并不在本文的讨论范围之内，接口测试可以放在单元测试中。</para>
		</section>
		<section>
			<title>Why 为什么要做协议测试</title>
			<para>传统测试更多注重界面的测试，界面是针对用户的，也是唯一可见，也是最容易测试的。我们通过下面的金字塔说明。</para>
			<screen>
	<![CDATA[
```text

          /\
         /  \ 
        / UI \
       /``````\
      /  API   \
     /``````````\
    /   Service  \
   /..............\
```	
	]]>
			</screen>
			<para>用户只能看到 UI ，UI测试是有局限的，只能看到冰山一角，越往下层越难发现软件的缺陷。</para>

			<para>互联网的今天应用软件已不仅仅是三层架构，互联网特点是多语言混合开发，软件运行在异构平台上。</para>

			<para>举例最简单的B/S结构的应用测试如下:</para>
			<screen>
<![CDATA[

```text
用户 -> DNS -> CDN -> Proxy / SLB -> Web -> Application -> Cache -> Database
```
]]>
			</screen>
			<para>这已经是最简单的结构了，复杂都远不止这些。中间环节还可以加入搜罗引擎，计划任务，单点登录......</para>

			<para>所以仅仅通过UI测试是无法满足，但我们往往看到企业中测试团队的人员比例是，UI测试人数最多，Service 人数最少，呈现出倒金字塔形状。</para>

		</section>
		<section>
			<title>where 在哪儿测试</title>


			<para>这里谈的协议，不仅限于UI到服务间的协议，还有服务于服务见的协议，进程与进程间的协议。</para>

			<para>这些协议五花八门，有私有协议，有开放式协议，有二进制协议，有文本协议，还有中性协议二进制与文本混用。</para>

			<para>难以归类，从不同角度可能做不同的归类。</para>
		</section>
		<section>
			<title>when 什么时候测试</title>


			<para>什么时候测试，我的建议紧随开发的进度。不要等待软件开发完时在测试，这样的好处是随时可能发现问题。</para>
		</section>
		<section>
			<title>Who 谁来做，执行对象</title>

			<para>协议测试可能是传统科班出身测试工程师的门槛，但对于全栈工程师来说相对容易。协议测试通常无法使用现有的测试软件做测试，很多情况需要我们写专用的测试软件。</para>

			<para>编写测试软件需要掌握哪些技术呢，除了精通一门语言还要掌握下面最基本的技能？</para>
			<orderedlist>
				<title>数据处理：</title>
				<listitem>XML处理 DOM / XPATH </listitem>
				<listitem>系列化与反序列化 例如 语言自身的系列化 / Json / Hession / MsgPack / Protobuf</listitem>
				<listitem>编码与解码 URL / Base64 / Unicode / GB系列</listitem>
				<listitem>摘要 MD5 / SHA1 / CRC32</listitem>
				<listitem>加密解密 DES / ASE / 分对称公私钥加密</listitem>
				<listitem>pack/unpack 主要用于处理C/C++结构体重的数据库结构</listitem>
			</orderedlist>
			<orderedlist>
				<title>通信：</title>
				<listitem>HTTP GET/POST/PUT/DELETE</listitem>
				<listitem>消息队列 RabbitMQ / ActiveMQ / ZeroMQ</listitem>
				<listitem>Unix Socket / Tcp Socket / UDP Socket</listitem>
				<listitem>HTML5 / Web Socket / Ajax</listitem>
				<listitem>管道</listitem>
				<listitem>Sniffer 软件（抓包/监控）</listitem>
			</orderedlist>
			<orderedlist>
				<title>信号，线程，存储：</title>
				<listitem>共享内存</listitem>
				<listitem>线程锁</listitem>
				<listitem>信号处理</listitem>

			</orderedlist>
		</section>
		<section>
			<title>How 怎样做测试</title>
			<para>使用现有的测试软件</para>
			<para>编写软件模拟协议发出请求然后验证反馈结果</para>
			<para>嗅探，植入</para>
			<para>目前自动化测试软件发展很快，可以实现很多协议测试，但仍有局限。所以仍然需要用户自己开发测试工具。</para>

			<para>对于 HTTP GET / POST 完全可以通过现有测试软件实现我们的测试需求。</para>

			<para>对于已知协议的测试是比较容易进行的，更多是工作是，编码/解码，协议的送出与反馈。</para>

			<para>对于很多未知的私有协议就需要经验了，需要大量协议嗅探，总结，反复尝试。文本协议门槛比较低，对于私有的二进制协议难度相对高些。</para>
		</section>
		<section>
			<title>如何学习协议测试</title>
			<orderedlist>
				<title>学习协议测试分为几个阶段：</title>
				<listitem>
					<para>首先从文本协议开始学起，第一步先拿 SMTP 发送邮件 练手，了解基本协议后，就可以进行下一步学习，学习HTTP协议，处理基本的请求。</para>
					<para>可以尝试自己开发一个 Web 服务器，不用太复杂，实现基本的目录浏览，文件下载，GET/POST 处理。最后学习ajax, json, websocket 等等，</para>
				</listitem>
				<listitem>
					<para>然后学习二进制协议。早年都欢拿 MSN / QQ 练手，实现一个QQ机器人，这里涉及到其他语言处理C/C++的结构体的问题，就是 pack/unpack 操作，这是一道门槛，阔跨过去前途光明。</para>
					<para>目前很多软件架构上尽量避免使用结构体，而是使用序列化例如msgpack/hession/Protobuf等等，主要是方便多语音环境的通信。</para>
				</listitem>
				<listitem>
					<para>最后学习与硬件交互，可以拿GSM Modem AT 命令练手，DTMF 信令解码，AFSK数字信号处理 等等</para>
				</listitem>
			</orderedlist>
			<sidebar>
				<title>案例：</title>
				<para>Motorola Mototrbo DMR 数字电台测试案例分享给各位。</para>
				<para>我是深圳较早一批使用数字电台的用户，手上有一台 Mototrbo XIR P8668 \(对讲机，一下简称P8668\)，P8668拥有GPS/短信收发功能。 我想搞清楚这个短信收发如何实现，并计划实现一个每日发送天气预报给终端的功能。 P8668 通过蓝牙与电脑连接，蓝牙会虚拟一个网卡，任何通信都可以转发到蓝牙设备。</para>
				<para>首先我开启嗅探器，扫描 P8668 的UDP端口，使用python 开发了一个简单日志记录功能，记录端口上通信的数据。然后开始测试，首先是ping功能，观看数据包变化。 没有多久就分析出ping的数据包，然后是发送短信，接收短信。反复比较分析每条日志，找出变化规律，最终完美的实现了短信收发。</para>
			</sidebar>
		</section>


		<section>
			<title>总结</title>
			<para>掌握协议测试的测试工程师钱途无量，协议测试门槛也远远高于一般的测试。</para>
			<para>对于协议测试工程师我要说的是，不要局限在协议测试工程师这个领域，格局要放大些，例如监控领域，自动化领域，游戏外挂领域等等。</para>
		</section>

	</section>
</chapter>