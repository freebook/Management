<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V5.0//EN"
	"/usr/share/xml/docbook/schema/dtd/5.0/docbook.dtd" [
	<!ENTITY article.author.xml 		SYSTEM "../common/article.author.xml">
	<!ENTITY book.info.legalnotice.xml 	SYSTEM "../common/book.info.legalnotice.xml">
	<!ENTITY book.info.abstract.xml		SYSTEM "../common/book.info.abstract.xml">
	
	<!ENTITY % doctype.entity.xml 	SYSTEM "doctype.entity.xml">
	%doctype.entity.xml;
	
]>
<article xml:base="http://www.netkiller.cn/journal/" xmlns="http://docbook.org/ns/docbook"
	xml:lang="zh-cn">
	<articleinfo>
		<title>DEVOPS</title>
		<subtitle>Technical department with DevOps</subtitle>
		&article.author.xml;
		&book.info.legalnotice.xml;
		<abstract>
			<title>摘要</title>
			<para></para>
		</abstract>

		<keywordset>
			<keyword></keyword>
			<keyword></keyword>
			<keyword></keyword>
			<keyword></keyword>
		</keywordset>
		<pubdate>$Date$</pubdate>
		<release>$Id: 601af1a7923a55b46af10a9402ebbbbf89798aad $</release>
	</articleinfo>

	&chapter.project.xml;

	<section id="workflow">
		<title>流程篇</title>
		<para>开发 -&gt; 测试 -&gt; 运维 贯穿始终。</para>
		<para>几乎所有的技术企业都会重视技术规范，为此制定各种规范，并要求员工严格执行。同时员工会想出各种对策，就这样形成了潜规则。</para>

		<para>流程与规范的制定需要需要满足几个条件，简单，容易掌握，容易执行，可重复执行</para>

		<section id="specification">
			<title>技术规范的误区</title>
			<para>企业管理层擅长制定乌托邦式的流程与规范，随便拿出一条都堪称完美，无懈可击，但没有考虑到执行结果，流程规范在执行过程中每个环节都会出现问题。</para>

			<para>我16年的职业生涯中在不同的公司任职过，几乎每到一家公司都会遇到各种规范，随着职业发展最后我也成为了规范的制定者，也曾经主持制定过开发规范，运维规范，测试规范等等。</para>
			<para>我做过很多规范，文档无数，技术人员根本不会去看，通过开会向下传达，开会的人根本没有心思理会你的规范，规范执行阻力是很大的，效果也差。</para>
			<para>终于有一天我意识问题的存在，开始反思，企业是否需要制定这些规范？ 我发现与企业环境/文化有很大关系。</para>

			<para>有些强制的规范可以通过一些技术手段，避免出现。不会出现也就无需规范！</para>


			<para>只有机器人才能100%执行流程</para>
			<para>除了事，制定规范，后续无人跟进，</para>
			<para>员工考虑的是尽快完成工作，</para>

			<para>但这些规范起到的实质作用就好比“请保持室内卫生，不准乱团垃圾，禁止随地吐痰”</para>


			<sidebar>
				<title>故事一</title>
				<para>例如下面一个小故事，公司某部因为将开发数月的代码丢失了，导致测试无法进行，领导打发雷霆，某管理层制定了下面的规范，大意为。</para>
				<literallayout>
					1. 定期备份机制
					2. 代码注释要求
					3. 代码访问需要更高层的批准
					4. 详细的部署文档
					等等
				</literallayout>
				<para>我认为源码管理主要有两种手段，技术手段与管理手段。</para>

				<para>我先谈谈管理手段：
					例如通常通过规章制度，责任追究等等手段，要求员工达到规范标准，但通常执行力都会打折，无法达到预期，人的不稳定性因素太多。往往发现员工没有按照规范操作为时已晚，将该员工辞退也无法挽回公司的损失。</para>

				<para>就如公司规章制度写的清清楚楚，要求员工提交代码到版本库，但各种原因没有被执行，当代码丢失，从上至下追究责任，公司的损失无法挽回。</para>
				<literallayout>
					所以我主张技术手段：
					例如源码如果发布到线上，必须经过版本库，只能使用自动部署，不允许程序员私自将代码交给运维手工部署。另外发布代码的同事，可以不提供生产服务器登陆权限，他只能通过工具发布代码。
					部署流程如下：
					源码(程序员) 提交到development 分支UAT阶段 ----> 合并到 testing
					分支Beta阶段（主管合并，程序员没有权限）------> master 分支(主管合并) -----> 自动部署系统(运维)
					----> 生产服务器。
					这样通过技术手段防止了代码因员工离职，硬盘损坏等等原因，导致代码丢失的可能。
					代码发布者也无需对照部署文档，手动登陆服务器逐条按照部署说明书操作，防止了人员误操作，也提高了部署效率，节省了人力成本，通常在5分钟之内可以完成所有部署。


				</literallayout>
			</sidebar>
			<sidebar>
				<title>故事二</title>
				<para>
					Sidebar content.
				</para>
				<literallayout>

					-----
					我再来举另外一个例子，就是开发中的编码规范，很多软件企业都有是不是？

					例如要求程序员：
					if
					(){}
					要写成
					if ()
					{
					...
					}
					等等要求不一一列举，甚至组织代码评审解决编码规范问题。

					我的建议为什么不在IDE上设置自动格式化，或者在svn/git提交的时候通过hook调用格式化程序。

					故事三
					-----
					管理层要求运维每天发送服务器状态报告，运维人员需要登录每个服务器或者从cacti等工具中获得服务器运行状态数据，然后制作一个报告文档，每天给各位发送一次。

					运维需要一个专职人员做这个报告，这种报告几乎没有人看，就像“人民日报” 人民从来不看。

					当运维事故该出现的时候还是会出现，老板一个一个骂，扣工资，扣奖金，运维觉得委屈，公司受到损失。平日里的这些工作并不能避免运维事故，也不能改善运维工作。

					故事四
					-----
					在举一个例子，运维工作要求备份数据，A员工负责备份，B
					员工负责检查A员工的备份，结果两年以后出事了，需要恢复数据，发现A没有备份，而B在一年前就再没有检查A的工作。起初前一年还是按流程备份，后来A发现B不再严格检查工作，备份工作逐渐减少，最后停止了备份，一直相安无事，直到事发。

					故事五
					-----
					我曾经遇到过一个兢兢业业的管理者，他制定规范，要求值班的同事7*24小时，每间隔一定的时间做一次操作，验证系统正常运行，以便能够第一时间通知运维处理故障。值班的同事而偶偷懒，他就半夜起来监控他们工作。一个打工者能做到如此，真让人佩服。
					但是我们有更好的方法，真的不必如此操劳且效率低下。

					这些故事是一个无休止的死循环
					-----
					出问题 -> 发上制定规范 ->
					无人看/看了慢慢淡忘/石沉大海 ->
					继续出问题。连续出现问题，采用行政手段处分，扣奖金等等。很多管理者将其归咎为 “执行力”
					弱，我并不这么认为。


					我觉得很多规范是形式主义。我一向主张实用主义。

					通过技术手段可能避免很多没有意义规范，开发自动化，测试自动化，运维自动化，这是趋势也是我的努力的目标。

					上面仅仅举了几个例子，较片面，不能完全表达我的想法，需要更多的沟通，欢迎提出您的意见与建议。
				</literallayout>
			</sidebar>
		</section>









		<section>
			<title>开发流程</title>

		</section>
		<section>
			<title>测试流程</title>

		</section>
		<section>
			<title>运维流程</title>

		</section>
	</section>

	<section id="implement">
		<title>实施篇</title>
		<para>按照章节顺序依次实施</para>
		<section>
			<title>项目管理工具</title>
			<para>实施DEVOPS首先我们要有一个项目管理工具。</para>
			<para>我建议使用 Gitlab，早年我倾向使用Trac，但Trac项目一直处于半死不活状态，目前来看Trac 对于
				Ticket管理强于Gitlab，但Gitlab发展的很快，我们可以看到最近的一次升级中Issue 加入了 Due date
				选项。Gitlab已经有风投介入，企业化运作，良性发展，未来会超越Redmine等项目管理软件，成为主流。所以我在工具篇采用Gitlab，BTW
				我没有使用 Redmine，我认为 Redmine 的发展方向更接近传统项目管理思维。</para>
			<para>软件项目管管理，我需要那些功能，Ticket/Issue管理、里程碑管理、内容管理Wiki、版本管理、合并分支、代码审查等等</para>
			<para>
				关于Gitlib的安装配置请参考
				<ulink url="http://www.netkiller.cn/project/project/gitlab/index.html" />
			</para>


			<section>
				<title>创建用户</title>
				<procedure>
					<title>企业内部使用的 Gitlab 初始化</title>
					<step>
						<para>关闭在线用户注册</para>

					</step>
					<step>
						<para>Step 3.</para>
						<substeps>
							<step>
								<para>Substep a.</para>
							</step>
							<step>
								<para>Substep b.</para>
							</step>
						</substeps>
					</step>
				</procedure>
			</section>
			<section>
				<title>创建组与项目</title>
				<procedure>
					<title>Gitlab 初始化 - 创建组</title>
					<step>
						<para>点击 New Group 按钮新建一个组，我习惯每个域一个组，所以我使用 netkiller.cn 作为组名称</para>
						<graphic format="png" fileref="images/gitlab/group.png"
							width="" srccredit="neo" />
					</step>
					<step>
						<para>输入 netkiller.cn 然后单击 Create group</para>
						<graphic format="png" fileref="images/gitlab/group.new.png"
							width="" srccredit="neo" />
					</step>
					<step>
						<para>组创建完毕</para>
						<graphic format="png" fileref="images/gitlab/groups.png"
							width="" srccredit="neo" />
					</step>
				</procedure>
				<para>创建组后接下来创建项目</para>
				<procedure>
					<title>Gitlab 初始化 - 创建项目</title>
					<step>
						<para>单击 New Project 创建项目</para>
						<graphic format="png" fileref="images/gitlab/projects.png"
							width="" srccredit="neo" />
					</step>
					<step>
						<para>输入 www.netkiller.cn 并点击 Create project 按钮创建项目</para>
						<graphic format="png" fileref="images/gitlab/projects.new.png"
							width="" srccredit="neo" />
					</step>
					<step>
						<para>项目创建完毕</para>
						<graphic format="png" fileref="images/gitlab/projects.created.png"
							width="" srccredit="neo" />
					</step>
				</procedure>
			</section>

			<section>
				<title>分支管理</title>
				<para>起初我们应对并行开发在Subversion上创建分支，每个任务一个分支，每个Bug一个分支，完成任务或修复bug后合并到开发分支(development)内部测试，然后再进入测试分支(testing)提交给测试组，测试组完成测试，最后进入主干(trunk)。对于Subverion来说每一个分支都是一份拷贝，SVN版本库膨胀的非常快。</para>
				<para>Git 解决了Svn 先天不足的分支管理功能，分支在GIT类似快照，同时GIT还提供了 pull request 功能。</para>
				<para>我们怎样使用git 的分支功能呢？ 首先我们不再为每个任务创建一个分支，将任务分支放在用户自己的仓库下面，通过 pull
					request 合并，同时合并过程顺便code review。</para>

				<para>testing: 用户测试组的测试分支，只能合并，不能提交代码。</para>
				<para>development：开发组的分支，可以合并，可以接受pull request, 可以提交代码</para>

				<procedure>
					<title>Gitlab 分支应用 - 创建分支</title>
					<step>
						<para>首先，点击左侧 Commits 按钮，然后点击 Branches 按钮进入分支管理</para>
						<graphic format="png" fileref="images/gitlab/branches.png"
							width="" srccredit="neo" />
					</step>

					<step>
						<para>点击 New branch 创建分支</para>
						<graphic format="png" fileref="images/gitlab/branches.new.png"
							width="" srccredit="neo" />
						<para>在 Branch name 中输入分支名称，然后点击 Create branch 创建分支 </para>
					</step>
					<step>
						<para>分支已经创建</para>
						<graphic format="png" fileref="images/gitlab/branches.created.png"
							width="" srccredit="neo" />
					</step>
				</procedure>
				<para>重复上面步骤，完成development分支的创建。</para>
				<para>保护分支：锁定分支，只允允许合并，不允许提交</para>
				<procedure>
					<title>保护分支</title>
					<step>
						
						<para>master</para>
						<para>testing</para>
					</step>

					<step>
						<para>Step 2.</para>

						<substeps>
							<step>

							</step>
							<step>
								<para>Substep b.</para>
							</step>
						</substeps>
					</step>
				</procedure>
			</section>
			<section>
				<title>分支管理</title>
			</section>
		</section>
		<section>
			<title>升级流程</title>
			<para>下面流程是自动化完成，这里分部讲解</para>
			<procedure>
				<title>升级操作流程</title>
				<step>
					<para>数据备份</para>
					<para>通常绝大多数人，备份还采用 cp / tar / 以及稍微有点技术含量的rsync做差异备份 例如</para>
					<screen>
					<![CDATA[
cp -r /www/example.com/www.example.com /backup/www.example.com-2016-05-23
tar zcvf www.example.com-2016-05-23.tgz /www/example.com/www.example.com

rsync -auzv /www/example.com/www.example.com /backup/www.example.com-2016-05-23
					]]>
					</screen>
					<para>这种备份适合比较小的软件包，对于图片服务器什么的就比较耗时。我很早就开始尝试使用快照备份当时使用LVM，后来转为Btrfs文件系统，到2010的时候btrfs快照已经非常成熟.</para>
					<screen>
					<![CDATA[
[root@www.netkiller.cn www]# btrfs subvolume snapshot /www /www/backup_2016-05-23
Create a snapshot of '/www' in '/www/backup_2016-05-23'
					]]>
					</screen>
					<para>快照瞬间建立，使用下面命令查看快照</para>
					<screen>
					<![CDATA[
[root@www.netkiller.cn www]# btrfs subvolume list /www
ID 284 gen 18583 top level 5 path backup_2016-05-23
					]]>
					</screen>
					<para>挂载快照</para>
					<screen>
					<![CDATA[
[root@www.netkiller.cn www]# mount -t btrfs -o subvol=backup_2016-05-23 /dev/xvdb1 /mnt
[root@www.netkiller.cn www]# ll /mnt/
					]]>
					</screen>
					<para>
						关于BTRFS详细使用方法，请参考
						<ulink url="http://www.netkiller.cn/linux/index.html">《Netkiller Linux 手札》</ulink>
					</para>
				</step>
				<step>
					<para></para>

					<para></para>
				</step>
				<step>
					<para></para>

				</step>
				<step>
					<para></para>
					<substeps>
						<step>
							<para></para>
						</step>
						<step>
							<para></para>
						</step>
					</substeps>
				</step>
				<step>
					<para></para>
				</step>
			</procedure>

		</section>
	</section>
	<section id="background">
		<title>背景</title>
	</section>
	<section id="overview">
		<title>概述</title>
	</section>
	<section id="summary">
		<title>总结</title>
	</section>
</article>