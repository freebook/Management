<?xml version="1.0" encoding="UTF-8"?>
<chapter id="index"><?dbhtml dir="business"?>
	<title>Business Administration</title>

	<!-- <chapter id="organizational"> <title>Organizational Architecture</title>  </chapter> -->
<!-- 	<section id="culture">
		<title>企业文化</title>
		<para>Creativity+Open+Fun+Freedom+Easy+Excellence</para>
		<para></para>
	</section> -->

	<section id="strategic">
		<title></title>
		<subtitle>Enterprise Strategic Management</subtitle>
		<section>
			<title>战略是什么</title>
			<para>德鲁克提出，战略就是通过最有效的管理，用最小的资源达到最大回报的过程。战略的根本是一种增长方式，我们用什么样的方式、什么样的路径达成企业的增长。</para>
		</section>
	</section>

	<section id="浅谈技术型企业管理">
		<title>浅谈技术型企业管理</title>
		<para>
			过去15年的职业生涯，我服务过很多企业，从一线员工到资深工程师以及各种管理角色。于是也想谈谈我的管理经验与大家分享。
			从08年开始从技术慢慢向管理过度，到10年基本完成转型，虽然后面更多是管理工作，但我从来没有离开过技术领域，特别是担任高级管理角色的过程中。
			始终关注技术，追逐技术，我的博客专栏与系列电子书更新没有间断过。
		</para>
		<section id="领导与管理团队">
			<title>领导与管理团队</title>
			<para>
				对我影响比较深的一部电影《U571》
			</para>
			<para>
				当船长告诉副船长泰莱这些话的时候“作为一个船长，你不能犹豫，你要采取行动，不果然行动，就危及全体船员，往往没有先例可遵循，资料不足，要当机立断”，“你出错，就要承担后果”，“假如你犹豫不决，不能当机立断，就不适合当潜艇队长”，泰莱开始反思。当大幅告诉船长泰莱，“指挥官有无限威严，是可敬可畏的人，他无所不知，无所不能”泰莱就已经担当起了船长的角色
			</para>
			<para>
				大多数的软件开发者是被“管理”的，而不是被“领导”的，而技术人员更喜欢被领导，而不是被管理。
			</para>
			<para>
				同样面对项目的一些问题，作为技术管理层你必须拿出方案，而不能将这些问题推给下属：你们看看怎么做，你们大家商量一下给我一个方案...等等
			</para>
			<para>
				我平时对下属说：你们这么做，应该这样做.....
				，而不是：你们看看怎么做，你们讨论一下看看有没有好的方案....（然后告诉我，我在跟上面说），管理层不是传话筒，上传下达的工作，秘书助理更适合。
			</para>
			<para>
				领导力强，管理可以稍松散一点；
				领导力弱，用管理与流程补充。领导力不可复制，只能被另一种替代，管理可以克隆。
			</para>
			<para>
				我更擅长领导，而不是管理，我认为领导占80%，管理站20%较为合理。
			</para>
			<para>
				领导能创造神话，管理可持续发展，企业可以从领导型走向管理型，但从管理型过度到领导型阻力重重。
			</para>
		</section>
	</section>
	<section id="项目管理">
		<title>项目管理</title>
		<para>
			项目管理：项目管理从管理角度出发，通常根据软件工程方法实施，通常是告诉领导我们在做什么，但常常无法安照计划进行。
			敏捷开发：从开发角度出发，告诉领导我们今天做完了什么！
		</para>
		<para>
			我认为项目管理模式的软件开发团队，不理利于创新，会降低员工的积极性，员工没有参与感，将员工视为工时，一个部件，一个资源，任凭项目经理的调度，使用。员工的想法无法得到重视，仅仅是执行命令。
			这种模式会浪费每个人20%的时间用来维护时间表。
		</para>
		<para>
			我更喜欢敏捷开发团队，我更喜欢全栈开发人员，让开发人员参与的软件开发周期的每个环节中，人力资源利用率高，让开发工作成为有趣的事，从被动接收任务分配，到主动参与其中。
		</para>
		<para>
			软件工程当下已经显得落后。尤其是快速变化的互联网行业。
		</para>
		<section id="团队合作">
			<title>团队合作</title>
			<para>
				团队合作不是挂在嘴边上了，也不是管理层开开会贯彻团队合作精神，就会形成凝聚力，顿时团队有所改善。
			</para>
			<para>
				事实上磨破嘴皮子也没人不会听你讲什么团队合作精神。对于大部分员工，站到99.9%都仅仅是打一份工，拿到该拿的￥,按时上下班。甚至很多管理层也是为了打一份工，拿一份高薪￥，按时上下班。
			</para>
			<para>
				真正能不靠管理，工作认为真负责，有敬业心的员工，他们一部分会在某些领域做的跟出色，另一部份会选择创业等等。
				你的企业能有这样的员工是运气。
			</para>
			<para>
				团队合作精神是管理不出来，只能靠领导艺术凝聚一个团队。
			</para>
		</section>
		<section id="出现问题为什么会相互推诿">
			<title>出现问题为什么会相互推诿</title>
			<para>
				一旦出现问题，很可能同事反目成仇，背后给你一枪，将责任推给其他人。有时可能是部门相互推卸责任。这种做法会像瘟疫一样传染，影响更多的人或部门效仿。
			</para>
			<para>
				如果不加以控制，后果很严重，波及面广，一旦成为定势，你再想翻盘非常困难。不管你是否愿意或承认，这将会成为企业文化的一部分。
			</para>
			<para>
				你想改变，很难！你会发现新入职的员工很快学会并适应这种推诿的企业文化，新鲜血液总是少量输入的，就像得了癌症一样不可控制。
			</para>
			<para>
				出现这样事情问题出在哪里？
			</para>
			<para>我们对待这个世界的态度会议这样一种方式反馈到自己身上：你怎么对待别人，被人就怎么对待你。</para>
			<itemizedlist spacing="compact">
				<listitem>
					<para>
						管理者不懂技术
					</para>
				</listitem>
				<listitem>
					<para>
						组织架构不合理，部门与部门是平级关系，平级部门最容易推卸责任。
					</para>
				</listitem>
				<listitem>
					<para>
						对自身定位，有些管理层认为是权利部门，我们更需要的是服务部门。
					</para>
				</listitem>
				<listitem>
					<para>
						背黑锅文化
					</para>
				</listitem>
			</itemizedlist>
			<section id="我来详细分析一下">
				<title>我来详细分析一下：</title>
				<para>
					首先是“管理者不懂技术”，如果管理者不懂技术，什么都想管，又管不好，当出现问题后，这位裁判只能听各部门负责人报告，那个部门的口才好，嗓门高.....
					那个部门就有优势，无法做好裁判工作。败下阵来的部门背黑锅，他们也不是孬的，骑驴看账本，走着瞧，挖坑埋地雷也要找回面子。
				</para>
				<para>
					“组织架构不合理”。平级部门最爱干的就是制定各种流程，让其他部门按照我的流程走，这样每个部门都会如法炮制，流程很多做法是给上面看的。
				</para>
				<para>
					“自身定位”，我认为每个人或部门都要有服务意识，我在外企工作多年，在外企HR，财务等等部门都是服务部门，确切的说是“主动服务部门”，他们会主动上门服务，例如财务会问问你有没有什么要报销的.....。而在国内大部分部门都是等你去主动找他们，他会会告诉你流程是什么，流程怎么走，这件事我不负责，你应该去找谁。服务意识是需要强行推行，中国人还没有达到服务意识层次。
				</para>
				<para>
					“背黑锅文化”除了问题急于找人背黑锅，揪出肇事者，责任全是他的，这在中国是惯用手法。我的经验是千万别找人被黑锅，不要单指某人，出现问题谁都有责任。
				</para>
				<para>
					一旦企业出现这个推诿行为的苗头，必须要控制，不可蔓延。避免出现多个平级部门，必须有人能领导这些部门，做好裁判工作，使他们不敢推卸责任。
				</para>
			</section>
		</section>
	</section>

</chapter>
